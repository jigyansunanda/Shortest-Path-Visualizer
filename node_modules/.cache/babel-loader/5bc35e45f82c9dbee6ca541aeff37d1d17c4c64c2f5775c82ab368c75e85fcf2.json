{"ast":null,"code":"import _toConsumableArray from\"/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _createClass from\"/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _classCallCheck from\"/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import React,{useState}from\"react\";import BFS from\"../../algorithms/BFS\";import Dijkstra from\"../../algorithms/Dijkstra\";import BellmanFord from\"../../algorithms/BellmanFord\";import FloydWarshall from\"../../algorithms/FloydWarshall\";import Button from\"react-bootstrap/Button\";import OverlayTrigger from\"react-bootstrap/OverlayTrigger\";import Tooltip from\"react-bootstrap/Tooltip\";import Modal from\"react-bootstrap/Modal\";import AlgoInfo from\"../algorithms-info/AlgoInfo\";import\"./Grid.css\";import Tutorial from\"../tutorial/Tutorial\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var generateRandomNumber=function generateRandomNumber(min,max){min=Math.ceil(min);max=Math.floor(max);return Math.floor(Math.random()*(max-min+1))+min;};var totalRows=20,totalCols=30;var totalModalPages=5;var sourceRow=10,sourceCol=10,destinationRow=10,destinationCol=20;var grid=[];var weight=[];var Node=/*#__PURE__*/_createClass(function Node(x,y){_classCallCheck(this,Node);this.row=x;this.col=y;this.isWall=false;this.isSource=x===sourceRow&&y===sourceCol;this.isDestination=x===destinationRow&&y===destinationCol;this.isVisited=false;this.isPath=false;this.weight=weight[x][y];});var initializeWeights=function initializeWeights(){weight=[];for(var row=0;row<totalRows;++row){var weightOfColumns=[];for(var col=0;col<totalCols;++col){var _weight=generateRandomNumber(10,30);weightOfColumns.push(_weight);}weight.push(weightOfColumns);}};initializeWeights();var previousSource;var previousDestination;var createVertices=function createVertices(){grid=[];for(var row=0;row<totalRows;++row){var columns=[];for(var col=0;col<totalCols;++col){columns.push(new Node(row,col));}grid.push(columns);}previousSource=grid[sourceRow][sourceCol];previousDestination=grid[destinationRow][destinationCol];};createVertices();var Grid=function Grid(){var _useState=useState(grid),_useState2=_slicedToArray(_useState,2),initialGrid=_useState2[0],setGrid=_useState2[1];var _useState3=useState([10,10]),_useState4=_slicedToArray(_useState3,2),currSource=_useState4[0],setCurrSource=_useState4[1];var _useState5=useState([10,20]),_useState6=_slicedToArray(_useState5,2),currDestination=_useState6[0],setCurrDestination=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),isMouseDown=_useState8[0],setMouseDown=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),isSourceSelected=_useState10[0],setSourceSelected=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),isDestinationSelected=_useState12[0],setDestinationSelected=_useState12[1];var _useState13=useState(\"Select Algorithm\"),_useState14=_slicedToArray(_useState13,2),algorithm=_useState14[0],setAlgorithm=_useState14[1];var _useState15=useState(false),_useState16=_slicedToArray(_useState15,2),isAlgorithm=_useState16[0],setIsAlgorithm=_useState16[1];var _useState17=useState(false),_useState18=_slicedToArray(_useState17,2),isAppRunning=_useState18[0],setAppRunning=_useState18[1];var _useState19=useState(true),_useState20=_slicedToArray(_useState19,2),isPathClear=_useState20[0],setPathClear=_useState20[1];var _useState21=useState(\"Source: (10, 10)  Destination: (10, 20)\"),_useState22=_slicedToArray(_useState21,2),shortestPath=_useState22[0],setShortestPath=_useState22[1];var _useState23=useState(false),_useState24=_slicedToArray(_useState23,2),algoInfoVisibility=_useState24[0],setAlgoInfoVisibility=_useState24[1];var _useState25=useState(false),_useState26=_slicedToArray(_useState25,2),tooltipVisibility=_useState26[0],setTooltipVisibility=_useState26[1];var _useState27=useState(true),_useState28=_slicedToArray(_useState27,2),tutorialVisibility=_useState28[0],setTutorialVisibility=_useState28[1];var _useState29=useState(1),_useState30=_slicedToArray(_useState29,2),modalID=_useState30[0],setModalID=_useState30[1];var resetSourceAndDestination=function resetSourceAndDestination(){sourceRow=10;sourceCol=10;destinationRow=10;destinationCol=20;previousSource=initialGrid[sourceRow][sourceCol];previousDestination=initialGrid[destinationRow][destinationCol];setGrid(_toConsumableArray(initialGrid));};var getNodeClass=function getNodeClass(node){var nodeType=\"node\";if(node.isSource===true){nodeType+=\" source-node\";}else if(node.isDestination===true){nodeType+=\" destination-node\";}else if(node.isWall===true){nodeType+=\" wall-node\";}else if(node.isPath===true){nodeType+=\" node-shortest-path\";}else if(node.isVisited===true){nodeType+=\" node-visited\";}return nodeType;};var handleMouseUp=function handleMouseUp(){setMouseDown(false);if(isSourceSelected)setSourceSelected(false);if(isDestinationSelected)setDestinationSelected(false);};var handleMouseDown=function handleMouseDown(node){if(isAppRunning===false){if(node.isWall===false){node.isWall=true;setMouseDown(true);if(node.isSource)setSourceSelected(true);if(node.isDestination)setDestinationSelected(true);}}};var handleMouseEnter=function handleMouseEnter(node){if(isAppRunning===false){if(isMouseDown){if(isSourceSelected){if(!node.isSource&&!node.isDestination&&!node.isWall){previousSource.isSource=false;previousSource.isDestination=false;previousSource.isWall=false;node.isSource=true;previousSource=node;setCurrSource([node.row,node.col]);}}else if(isDestinationSelected){if(!node.isSource&&!node.isDestination&&!node.isWall){previousDestination.isSource=false;previousDestination.isDestination=false;previousDestination.isWall=false;node.isDestination=true;previousDestination=node;setCurrDestination([node.row,node.col]);}}else{if(!node.isSource&&!node.isDestination&&!node.isWall){node.isWall=true;}}setShortestPath(\"Source: (\".concat(currSource[0],\", \").concat(currSource[1],\")  Destination: (\").concat(currDestination[0],\", \").concat(currDestination[1],\")\"));setGrid(_toConsumableArray(initialGrid));}}};var clearWalls=function clearWalls(){if(isAppRunning===false){for(var row=0;row<totalRows;++row){for(var col=0;col<totalCols;++col){initialGrid[row][col].isWall=false;initialGrid[row][col].isVisited=false;}}setGrid(_toConsumableArray(initialGrid));setStatusInfo(0);setShortestPath(\"Source: (\".concat(currSource[0],\", \").concat(currSource[1],\")   Destination: (\").concat(currDestination[0],\", \").concat(currDestination[1],\")\"));}};var clearPath=function clearPath(){if(isAppRunning===false){for(var row=0;row<totalRows;++row){for(var col=0;col<totalCols;++col){initialGrid[row][col].isPath=false;initialGrid[row][col].isVisited=false;}}setGrid(_toConsumableArray(initialGrid));setAlgorithm(\"Select Algorithm\");setIsAlgorithm(false);showWeights();setStatusInfo(0);setShortestPath(\"Source: (\".concat(currSource[0],\", \").concat(currSource[1],\")   Destination: (\").concat(currDestination[0],\", \").concat(currDestination[1],\")\"));setPathClear(true);}};var resetGrid=function resetGrid(){if(isAppRunning===false){resetSourceAndDestination();for(var row=0;row<totalRows;++row){for(var col=0;col<totalCols;++col){initialGrid[row][col].isPath=false;initialGrid[row][col].isWall=false;initialGrid[row][col].isVisited=false;initialGrid[row][col].isSource=row===sourceRow&&col===sourceCol;initialGrid[row][col].isDestination=row===destinationRow&&col===destinationCol;}}setGrid(_toConsumableArray(initialGrid));setAlgorithm(\"Select Algorithm\");showWeights();setStatusInfo(0);setShortestPath(\"Source: (\".concat(currSource[0],\", \").concat(currSource[1],\")   Destination: (\").concat(currDestination[0],\", \").concat(currDestination[1],\")\"));setPathClear(true);}};var reconfigureWeights=function reconfigureWeights(){if(isAppRunning===false){for(var row=0;row<totalRows;++row){for(var col=0;col<totalCols;++col){weight[row][col]=generateRandomNumber(10,30);initialGrid[row][col].weight=weight[row][col];initialGrid[row][col].isVisited=false;}}setGrid(_toConsumableArray(initialGrid));setAlgorithm(\"Select Algorithm\");showWeights();setShortestPath(\"Source: (\".concat(currSource[0],\", \").concat(currSource[1],\")   Destination: (\").concat(currDestination[0],\", \").concat(currDestination[1],\")\"));setStatusInfo(0);setPathClear(true);}};var getCurrentSource=function getCurrentSource(){for(var row=0;row<totalRows;++row){for(var col=0;col<totalCols;++col){if(initialGrid[row][col].isSource===true){return initialGrid[row][col];}}}return initialGrid[sourceRow][sourceCol];// Ideally would never reach here.\n};var getCurrentDestination=function getCurrentDestination(){for(var row=0;row<totalRows;++row){for(var col=0;col<totalCols;++col){if(initialGrid[row][col].isDestination===true){return initialGrid[row][col];}}}return initialGrid[destinationRow][destinationCol];// Ideally would never reach here.\n};var nullifyWeights=function nullifyWeights(){var weights=document.getElementsByClassName(\"weight-value\");for(var i=0;i<weights.length;++i){weights[i].className=\"not-selectable weight-value hidden\";}setGrid(_toConsumableArray(initialGrid));};var showWeights=function showWeights(){var weights=document.getElementsByClassName(\"weight-value\");for(var i=0;i<weights.length;++i){weights[i].className=\"not-selectable weight-value\";}setGrid(_toConsumableArray(initialGrid));};var setStatusInfo=function setStatusInfo(statusID){var status=\"\";if(statusID===1)status=\"shortest-path-result spfv\";else if(statusID===2)status=\"shortest-path-result spff\";else status=\"shortest-path-result\";var statusInfo=document.getElementById(\"spf\");statusInfo.className=status;};var setAnimationInfo=function setAnimationInfo(){var animationInfo=\"\";if(algorithm===\"BFS (Breadth First Search)\"){animationInfo=\"Visited Nodes are being animated.  In BFS, visited nodes are discovered first through shortest path.\";}else if(algorithm===\"Bellman Ford Algorithm\"){animationInfo=\"Each animation step indicates new nodes that are being relaxed. The upward trajectory of animation is specific to loops running in Algorithmic Implementation.\";}else if(algorithm===\"Floyd Warshall Algorithm\"){animationInfo=\"Animated nodes are the intermediate nodes through which, shortest distance between each pair of source and destination is being calculated.\";}else{// algorithm === \"Dijkstra's Algorithm\"\nanimationInfo=\"Animated nodes are being picked greedily according to their distance (in increasing order) from the source node.\";}setShortestPath(animationInfo);setStatusInfo(1);};var setNotFound=function setNotFound(){setStatusInfo(2);setShortestPath(\"Destination is not reachable from Source\");setAppRunning(false);setIsAlgorithm(false);setAlgorithm(\"Select Algorithm\");};var animateNodes=function animateNodes(nodes,timer,nodeType,minPathLength){setTimeout(function(){if(nodeType===\"visited\"){for(var i=0;i<nodes.length;++i){nodes[i].isVisited=true;}setGrid(_toConsumableArray(initialGrid));}else{for(var _i=0;_i<nodes.length;++_i){nodes[_i].isPath=true;}setGrid(_toConsumableArray(initialGrid));setStatusInfo(2);if(minPathLength===Infinity){setShortestPath(\"Destination is not reachable from source\");}else{setShortestPath(\"Shortest path length from Source (\".concat(currSource[0],\", \").concat(currSource[1],\") to Destination (\").concat(currDestination[0],\", \").concat(currDestination[1],\") is \").concat(minPathLength));}setAppRunning(false);setIsAlgorithm(false);setAlgorithm(\"Select Algorithm\");}},timer);};var visualize=function visualize(){if(isAppRunning===false){if(algorithm===\"Select Algorithm\"){alert(\"Select Algorithm to visualize\");}else{setAppRunning(true);setPathClear(false);var src=getCurrentSource();var dst=getCurrentDestination();if(algorithm===\"BFS (Breadth First Search)\"){var results=BFS(initialGrid,src,dst);var _results=_slicedToArray(results,3),minPathLength=_results[0],visitedNodes=_results[1],shortestPathNodes=_results[2];if(visitedNodes.length!==0)setAnimationInfo();var timer=500;for(var i=0;i<visitedNodes.length;++i){animateNodes(visitedNodes[i],timer,\"visited\",minPathLength);timer+=400;}if(shortestPathNodes.length>0){shortestPathNodes.reverse();for(var k=0;k<shortestPathNodes.length;++k){animateNodes([shortestPathNodes[k]],timer,\"path\",minPathLength);timer+=100;}}else{setTimeout(setNotFound,timer);}}else if(algorithm===\"Bellman Ford Algorithm\"){var _results2=BellmanFord(initialGrid,src,dst);var _results3=_slicedToArray(_results2,3),_minPathLength=_results3[0],_visitedNodes=_results3[1],_shortestPathNodes=_results3[2];if(_visitedNodes.length!==0)setAnimationInfo();var _timer=500;for(var _i2=0;_i2<_visitedNodes.length;++_i2){animateNodes(_visitedNodes[_i2],_timer,\"visited\",_minPathLength);_timer+=500;}if(_shortestPathNodes.length>0){_shortestPathNodes.reverse();for(var _k=0;_k<_shortestPathNodes.length;++_k){animateNodes([_shortestPathNodes[_k]],_timer,\"path\",_minPathLength);_timer+=100;}}else{setTimeout(setNotFound,_timer);}}else if(algorithm===\"Floyd Warshall Algorithm\"){var _results4=FloydWarshall(initialGrid,src,dst);var _results5=_slicedToArray(_results4,3),_minPathLength2=_results5[0],_visitedNodes2=_results5[1],_shortestPathNodes2=_results5[2];if(_visitedNodes2.length!==0)setAnimationInfo();var _timer2=500;for(var _i3=0;_i3<_visitedNodes2.length;++_i3){animateNodes(_visitedNodes2[_i3],_timer2,\"visited\",_minPathLength2);_timer2+=25;}if(_shortestPathNodes2.length>0){for(var _k2=0;_k2<_shortestPathNodes2.length;++_k2){animateNodes([_shortestPathNodes2[_k2]],_timer2,\"path\",_minPathLength2);_timer2+=100;}}else{setTimeout(setNotFound,_timer2);}}else{var _results6=Dijkstra(grid,src,dst);var _results7=_slicedToArray(_results6,3),_minPathLength3=_results7[0],_visitedNodes3=_results7[1],_shortestPathNodes3=_results7[2];if(_visitedNodes3.length!==0)setAnimationInfo();var _timer3=200;for(var _i4=0;_i4<_visitedNodes3.length;++_i4){animateNodes(_visitedNodes3[_i4],_timer3,\"visited\",_minPathLength3);_timer3+=50;}if(_shortestPathNodes3.length>0){_shortestPathNodes3.reverse();for(var _k3=0;_k3<_shortestPathNodes3.length;++_k3){animateNodes([_shortestPathNodes3[_k3]],_timer3,\"path\",_minPathLength3);_timer3+=100;}}else{setTimeout(setNotFound,_timer3);}}}}};var toggleBackgroundBlur=function toggleBackgroundBlur(){var blur=document.getElementById(\"blur\");blur.classList.toggle(\"active\");};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"board\",id:\"blur\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"complete-navbar\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"navbar justify-content-center app-header\",children:/*#__PURE__*/_jsx(\"p\",{className:\"app-name\",children:\"Shortest Path Visualizer\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"navbar justify-content-center\",children:/*#__PURE__*/_jsxs(\"ul\",{className:\"nav justify-content-center navbar-content\",children:[/*#__PURE__*/_jsxs(\"li\",{className:\"dropdown nav-item\",\"data-bs-toggle\":\"dropdown\",children:[/*#__PURE__*/_jsx(\"a\",{className:\"nav-link dropdown-toggle not-selectable\",disabled:isAppRunning,children:algorithm}),/*#__PURE__*/_jsxs(\"ul\",{className:\"dropdown-menu dropdown-menu-light\",children:[/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(\"a\",{className:\"dropdown-item\",href:\"#\",onClick:function onClick(){nullifyWeights();setIsAlgorithm(true);setAlgorithm(\"BFS (Breadth First Search)\");},children:\"BFS (Breadth First Search)\"})}),/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(\"a\",{className:\"dropdown-item\",href:\"#\",onClick:function onClick(){showWeights();setIsAlgorithm(true);setAlgorithm(\"Dijkstra's Algorithm\");},children:\"Dijkstra's Algorithm\"})}),/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(\"a\",{className:\"dropdown-item\",href:\"#\",onClick:function onClick(){showWeights();setIsAlgorithm(true);setAlgorithm(\"Bellman Ford Algorithm\");},children:\"Bellman Ford Algorithm\"})}),/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(\"a\",{className:\"dropdown-item\",href:\"#\",onClick:function onClick(){showWeights();setIsAlgorithm(true);setAlgorithm(\"Floyd Warshall Algorithm\");},children:\"Floyd Warshall Algorithm\"})})]})]}),/*#__PURE__*/_jsx(\"li\",{className:\"nav-item\",children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn grad-text v-btn\",onClick:visualize,disabled:isAppRunning||!isAlgorithm||!isPathClear,children:\"\\xA0 Visualize \\xA0\"})}),/*#__PURE__*/_jsx(\"li\",{className:\"nav-item\",children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn grad-text\",onClick:clearPath,disabled:isAppRunning,children:\"\\xA0 Clear Path \\xA0\"})}),/*#__PURE__*/_jsx(\"li\",{className:\"nav-item\",children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn grad-text\",onClick:clearWalls,disabled:isAppRunning,children:\"\\xA0 Clear Walls \\xA0\"})}),/*#__PURE__*/_jsx(\"li\",{className:\"nav-item\",children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn grad-text\",onClick:resetGrid,disabled:isAppRunning,children:\"\\xA0 Reset Grid \\xA0\"})}),/*#__PURE__*/_jsx(\"li\",{className:\"nav-item\",children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn grad-text\",onClick:reconfigureWeights,disabled:isAppRunning,children:\"\\xA0 Reconfigure Weights \\xA0\"})}),/*#__PURE__*/_jsx(\"li\",{className:\"nav-item\",children:/*#__PURE__*/_jsx(OverlayTrigger,{placement:\"top\",overlay:/*#__PURE__*/_jsx(Tooltip,{id:\"tooltip-top\",children:/*#__PURE__*/_jsx(\"strong\",{children:\"Meet the Algorithms\"})}),show:tooltipVisibility,children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn grad-text\",disabled:isAppRunning,onClick:function onClick(){setTooltipVisibility(false);toggleBackgroundBlur();setAlgoInfoVisibility(true);},onMouseEnter:function onMouseEnter(){setTooltipVisibility(true);},onMouseLeave:function onMouseLeave(){setTooltipVisibility(false);},children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-solid fa-laptop-code fa-lg\"})})},\"top\")})]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"full-grid\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"path-length not-selectable\",children:/*#__PURE__*/_jsx(\"p\",{id:\"spf\",className:\"shortest-path-result\",children:shortestPath})}),initialGrid.map(function(row,rowIndex){return/*#__PURE__*/_jsx(\"div\",{className:\"rows\",children:row.map(function(column,columnIndex){return/*#__PURE__*/_jsx(\"div\",{className:getNodeClass(column),id:\"\".concat(rowIndex,\"-\").concat(columnIndex),onMouseUp:function onMouseUp(){handleMouseUp();},onMouseDown:function onMouseDown(){handleMouseDown(column);},onMouseEnter:function onMouseEnter(){handleMouseEnter(column);},children:/*#__PURE__*/_jsx(\"p\",{className:\"not-selectable weight-value\",children:column.weight})},columnIndex);})},rowIndex);})]})]}),/*#__PURE__*/_jsxs(Modal,{show:algoInfoVisibility,onHide:function onHide(){setAlgoInfoVisibility(false);},backdrop:\"static\",size:\"xl\",scrollable:true,children:[/*#__PURE__*/_jsx(Modal.Header,{closeButton:true,children:/*#__PURE__*/_jsx(Modal.Title,{children:\"Meet The Algorithms\"})}),/*#__PURE__*/_jsx(Modal.Body,{children:/*#__PURE__*/_jsx(AlgoInfo,{})}),/*#__PURE__*/_jsx(Modal.Footer,{children:/*#__PURE__*/_jsx(Button,{variant:\"primary\",onClick:function onClick(){toggleBackgroundBlur();setAlgoInfoVisibility(false);},className:\"close-btn\",children:\"Close\"})})]}),/*#__PURE__*/_jsxs(Modal,{show:tutorialVisibility,onHide:function onHide(){setTutorialVisibility(false);},backdrop:\"static\",size:\"lg\",scrollable:true,id:\"tut-modal\",children:[/*#__PURE__*/_jsx(Modal.Body,{children:/*#__PURE__*/_jsx(Tutorial,{modalID:modalID})}),/*#__PURE__*/_jsxs(Modal.Footer,{className:\"justify-content-between\",children:[/*#__PURE__*/_jsx(Button,{variant:\"primary\",onClick:function onClick(){setTutorialVisibility(false);},className:\"skip-btn float-left\",children:\"\".concat(modalID===totalModalPages?\"Close\":\"Skip Tutorial\")}),/*#__PURE__*/_jsx(\"p\",{className:\"modal-page-id\",children:\"\".concat(modalID,\" / \").concat(totalModalPages)}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Button,{className:\"tut-nav-btn\",variant:\"primary\",onClick:function onClick(){setModalID(modalID-1);},disabled:modalID===1,children:\"Prev\"}),/*#__PURE__*/_jsx(Button,{className:\"tut-nav-btn\",variant:\"primary\",onClick:function onClick(){setModalID(modalID+1);},disabled:modalID===totalModalPages,children:\"Next\"})]})]})]})]});};export default Grid;","map":{"version":3,"names":["React","useState","BFS","Dijkstra","BellmanFord","FloydWarshall","Button","OverlayTrigger","Tooltip","Modal","AlgoInfo","Tutorial","generateRandomNumber","min","max","Math","ceil","floor","random","totalRows","totalCols","totalModalPages","sourceRow","sourceCol","destinationRow","destinationCol","grid","weight","Node","x","y","row","col","isWall","isSource","isDestination","isVisited","isPath","initializeWeights","weightOfColumns","push","previousSource","previousDestination","createVertices","columns","Grid","initialGrid","setGrid","currSource","setCurrSource","currDestination","setCurrDestination","isMouseDown","setMouseDown","isSourceSelected","setSourceSelected","isDestinationSelected","setDestinationSelected","algorithm","setAlgorithm","isAlgorithm","setIsAlgorithm","isAppRunning","setAppRunning","isPathClear","setPathClear","shortestPath","setShortestPath","algoInfoVisibility","setAlgoInfoVisibility","tooltipVisibility","setTooltipVisibility","tutorialVisibility","setTutorialVisibility","modalID","setModalID","resetSourceAndDestination","getNodeClass","node","nodeType","handleMouseUp","handleMouseDown","handleMouseEnter","clearWalls","setStatusInfo","clearPath","showWeights","resetGrid","reconfigureWeights","getCurrentSource","getCurrentDestination","nullifyWeights","weights","document","getElementsByClassName","i","length","className","statusID","status","statusInfo","getElementById","setAnimationInfo","animationInfo","setNotFound","animateNodes","nodes","timer","minPathLength","setTimeout","Infinity","visualize","alert","src","dst","results","visitedNodes","shortestPathNodes","reverse","k","toggleBackgroundBlur","blur","classList","toggle","map","rowIndex","column","columnIndex"],"sources":["/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/grid/Grid.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport BFS from \"../../algorithms/BFS\";\nimport Dijkstra from \"../../algorithms/Dijkstra\";\nimport BellmanFord from \"../../algorithms/BellmanFord\";\nimport FloydWarshall from \"../../algorithms/FloydWarshall\";\n\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport Modal from \"react-bootstrap/Modal\";\n\nimport AlgoInfo from \"../algorithms-info/AlgoInfo\";\n\nimport \"./Grid.css\";\nimport Tutorial from \"../tutorial/Tutorial\";\n\nconst generateRandomNumber = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst [totalRows, totalCols] = [20, 30];\n\nconst totalModalPages = 5;\n\nvar [sourceRow, sourceCol, destinationRow, destinationCol] = [10, 10, 10, 20];\n\nvar grid = [];\nvar weight = [];\n\nclass Node {\n    constructor(x, y) {\n        this.row = x;\n        this.col = y;\n        this.isWall = false;\n        this.isSource = x === sourceRow && y === sourceCol;\n        this.isDestination = x === destinationRow && y === destinationCol;\n        this.isVisited = false;\n        this.isPath = false;\n        this.weight = weight[x][y];\n    }\n}\n\nconst initializeWeights = () => {\n    weight = [];\n    for (let row = 0; row < totalRows; ++row) {\n        let weightOfColumns = [];\n        for (let col = 0; col < totalCols; ++col) {\n            let weight = generateRandomNumber(10, 30);\n            weightOfColumns.push(weight);\n        }\n        weight.push(weightOfColumns);\n    }\n};\n\ninitializeWeights();\n\nvar previousSource;\nvar previousDestination;\n\nconst createVertices = () => {\n    grid = [];\n    for (let row = 0; row < totalRows; ++row) {\n        let columns = [];\n        for (let col = 0; col < totalCols; ++col) {\n            columns.push(new Node(row, col));\n        }\n        grid.push(columns);\n    }\n    previousSource = grid[sourceRow][sourceCol];\n    previousDestination = grid[destinationRow][destinationCol];\n};\n\ncreateVertices();\n\nconst Grid = () => {\n    const [initialGrid, setGrid] = useState(grid);\n    const [currSource, setCurrSource] = useState([10, 10]);\n    const [currDestination, setCurrDestination] = useState([10, 20]);\n    const [isMouseDown, setMouseDown] = useState(false);\n    const [isSourceSelected, setSourceSelected] = useState(false);\n    const [isDestinationSelected, setDestinationSelected] = useState(false);\n    const [algorithm, setAlgorithm] = useState(\"Select Algorithm\");\n    const [isAlgorithm, setIsAlgorithm] = useState(false);\n    const [isAppRunning, setAppRunning] = useState(false);\n    const [isPathClear, setPathClear] = useState(true);\n    const [shortestPath, setShortestPath] = useState(\n        `Source: (10, 10)  Destination: (10, 20)`\n    );\n    const [algoInfoVisibility, setAlgoInfoVisibility] = useState(false);\n    const [tooltipVisibility, setTooltipVisibility] = useState(false);\n    const [tutorialVisibility, setTutorialVisibility] = useState(true);\n    const [modalID, setModalID] = useState(1);\n\n    const resetSourceAndDestination = () => {\n        [sourceRow, sourceCol, destinationRow, destinationCol] = [\n            10, 10, 10, 20,\n        ];\n        previousSource = initialGrid[sourceRow][sourceCol];\n        previousDestination = initialGrid[destinationRow][destinationCol];\n        setGrid([...initialGrid]);\n    };\n\n    const getNodeClass = (node) => {\n        let nodeType = \"node\";\n        if (node.isSource === true) {\n            nodeType += \" source-node\";\n        } else if (node.isDestination === true) {\n            nodeType += \" destination-node\";\n        } else if (node.isWall === true) {\n            nodeType += \" wall-node\";\n        } else if (node.isPath === true) {\n            nodeType += \" node-shortest-path\";\n        } else if (node.isVisited === true) {\n            nodeType += \" node-visited\";\n        }\n        return nodeType;\n    };\n\n    const handleMouseUp = () => {\n        setMouseDown(false);\n        if (isSourceSelected) setSourceSelected(false);\n        if (isDestinationSelected) setDestinationSelected(false);\n    };\n\n    const handleMouseDown = (node) => {\n        if (isAppRunning === false) {\n            if (node.isWall === false) {\n                node.isWall = true;\n                setMouseDown(true);\n                if (node.isSource) setSourceSelected(true);\n                if (node.isDestination) setDestinationSelected(true);\n            }\n        }\n    };\n\n    const handleMouseEnter = (node) => {\n        if (isAppRunning === false) {\n            if (isMouseDown) {\n                if (isSourceSelected) {\n                    if (!node.isSource && !node.isDestination && !node.isWall) {\n                        previousSource.isSource = false;\n                        previousSource.isDestination = false;\n                        previousSource.isWall = false;\n                        node.isSource = true;\n                        previousSource = node;\n                        setCurrSource([node.row, node.col]);\n                    }\n                } else if (isDestinationSelected) {\n                    if (!node.isSource && !node.isDestination && !node.isWall) {\n                        previousDestination.isSource = false;\n                        previousDestination.isDestination = false;\n                        previousDestination.isWall = false;\n                        node.isDestination = true;\n                        previousDestination = node;\n                        setCurrDestination([node.row, node.col]);\n                    }\n                } else {\n                    if (!node.isSource && !node.isDestination && !node.isWall) {\n                        node.isWall = true;\n                    }\n                }\n                setShortestPath(\n                    `Source: (${currSource[0]}, ${currSource[1]})  Destination: (${currDestination[0]}, ${currDestination[1]})`\n                );\n                setGrid([...initialGrid]);\n            }\n        }\n    };\n\n    const clearWalls = () => {\n        if (isAppRunning === false) {\n            for (let row = 0; row < totalRows; ++row) {\n                for (let col = 0; col < totalCols; ++col) {\n                    initialGrid[row][col].isWall = false;\n                    initialGrid[row][col].isVisited = false;\n                }\n            }\n            setGrid([...initialGrid]);\n            setStatusInfo(0);\n            setShortestPath(\n                `Source: (${currSource[0]}, ${currSource[1]})   Destination: (${currDestination[0]}, ${currDestination[1]})`\n            );\n        }\n    };\n\n    const clearPath = () => {\n        if (isAppRunning === false) {\n            for (let row = 0; row < totalRows; ++row) {\n                for (let col = 0; col < totalCols; ++col) {\n                    initialGrid[row][col].isPath = false;\n                    initialGrid[row][col].isVisited = false;\n                }\n            }\n            setGrid([...initialGrid]);\n            setAlgorithm(\"Select Algorithm\");\n            setIsAlgorithm(false);\n            showWeights();\n            setStatusInfo(0);\n            setShortestPath(\n                `Source: (${currSource[0]}, ${currSource[1]})   Destination: (${currDestination[0]}, ${currDestination[1]})`\n            );\n            setPathClear(true);\n        }\n    };\n\n    const resetGrid = () => {\n        if (isAppRunning === false) {\n            resetSourceAndDestination();\n            for (let row = 0; row < totalRows; ++row) {\n                for (let col = 0; col < totalCols; ++col) {\n                    initialGrid[row][col].isPath = false;\n                    initialGrid[row][col].isWall = false;\n                    initialGrid[row][col].isVisited = false;\n                    initialGrid[row][col].isSource =\n                        row === sourceRow && col === sourceCol;\n                    initialGrid[row][col].isDestination =\n                        row === destinationRow && col === destinationCol;\n                }\n            }\n            setGrid([...initialGrid]);\n            setAlgorithm(\"Select Algorithm\");\n            showWeights();\n            setStatusInfo(0);\n            setShortestPath(\n                `Source: (${currSource[0]}, ${currSource[1]})   Destination: (${currDestination[0]}, ${currDestination[1]})`\n            );\n            setPathClear(true);\n        }\n    };\n\n    const reconfigureWeights = () => {\n        if (isAppRunning === false) {\n            for (let row = 0; row < totalRows; ++row) {\n                for (let col = 0; col < totalCols; ++col) {\n                    weight[row][col] = generateRandomNumber(10, 30);\n                    initialGrid[row][col].weight = weight[row][col];\n                    initialGrid[row][col].isVisited = false;\n                }\n            }\n            setGrid([...initialGrid]);\n            setAlgorithm(\"Select Algorithm\");\n            showWeights();\n            setShortestPath(\n                `Source: (${currSource[0]}, ${currSource[1]})   Destination: (${currDestination[0]}, ${currDestination[1]})`\n            );\n            setStatusInfo(0);\n            setPathClear(true);\n        }\n    };\n\n    const getCurrentSource = () => {\n        for (let row = 0; row < totalRows; ++row) {\n            for (let col = 0; col < totalCols; ++col) {\n                if (initialGrid[row][col].isSource === true) {\n                    return initialGrid[row][col];\n                }\n            }\n        }\n        return initialGrid[sourceRow][sourceCol]; // Ideally would never reach here.\n    };\n\n    const getCurrentDestination = () => {\n        for (let row = 0; row < totalRows; ++row) {\n            for (let col = 0; col < totalCols; ++col) {\n                if (initialGrid[row][col].isDestination === true) {\n                    return initialGrid[row][col];\n                }\n            }\n        }\n        return initialGrid[destinationRow][destinationCol]; // Ideally would never reach here.\n    };\n\n    const nullifyWeights = () => {\n        let weights = document.getElementsByClassName(\"weight-value\");\n        for (let i = 0; i < weights.length; ++i) {\n            weights[i].className = \"not-selectable weight-value hidden\";\n        }\n        setGrid([...initialGrid]);\n    };\n\n    const showWeights = () => {\n        let weights = document.getElementsByClassName(\"weight-value\");\n        for (let i = 0; i < weights.length; ++i) {\n            weights[i].className = \"not-selectable weight-value\";\n        }\n        setGrid([...initialGrid]);\n    };\n\n    const setStatusInfo = (statusID) => {\n        let status = \"\";\n        if (statusID === 1) status = \"shortest-path-result spfv\";\n        else if (statusID === 2) status = \"shortest-path-result spff\";\n        else status = \"shortest-path-result\";\n        let statusInfo = document.getElementById(\"spf\");\n        statusInfo.className = status;\n    };\n\n    const setAnimationInfo = () => {\n        let animationInfo = \"\";\n        if (algorithm === \"BFS (Breadth First Search)\") {\n            animationInfo =\n                \"Visited Nodes are being animated.  In BFS, visited nodes are discovered first through shortest path.\";\n        } else if (algorithm === \"Bellman Ford Algorithm\") {\n            animationInfo =\n                \"Each animation step indicates new nodes that are being relaxed. The upward trajectory of animation is specific to loops running in Algorithmic Implementation.\";\n        } else if (algorithm === \"Floyd Warshall Algorithm\") {\n            animationInfo =\n                \"Animated nodes are the intermediate nodes through which, shortest distance between each pair of source and destination is being calculated.\";\n        } else {\n            // algorithm === \"Dijkstra's Algorithm\"\n            animationInfo =\n                \"Animated nodes are being picked greedily according to their distance (in increasing order) from the source node.\";\n        }\n        setShortestPath(animationInfo);\n        setStatusInfo(1);\n    };\n\n    const setNotFound = () => {\n        setStatusInfo(2);\n        setShortestPath(\"Destination is not reachable from Source\");\n        setAppRunning(false);\n        setIsAlgorithm(false);\n        setAlgorithm(\"Select Algorithm\");\n    };\n\n    const animateNodes = (nodes, timer, nodeType, minPathLength) => {\n        setTimeout(() => {\n            if (nodeType === \"visited\") {\n                for (let i = 0; i < nodes.length; ++i) {\n                    nodes[i].isVisited = true;\n                }\n                setGrid([...initialGrid]);\n            } else {\n                for (let i = 0; i < nodes.length; ++i) {\n                    nodes[i].isPath = true;\n                }\n                setGrid([...initialGrid]);\n                setStatusInfo(2);\n                if (minPathLength === Infinity) {\n                    setShortestPath(\"Destination is not reachable from source\");\n                } else {\n                    setShortestPath(\n                        `Shortest path length from Source (${currSource[0]}, ${currSource[1]}) to Destination (${currDestination[0]}, ${currDestination[1]}) is ${minPathLength}`\n                    );\n                }\n                setAppRunning(false);\n                setIsAlgorithm(false);\n                setAlgorithm(\"Select Algorithm\");\n            }\n        }, timer);\n    };\n\n    const visualize = () => {\n        if (isAppRunning === false) {\n            if (algorithm === \"Select Algorithm\") {\n                alert(\"Select Algorithm to visualize\");\n            } else {\n                setAppRunning(true);\n                setPathClear(false);\n                let src = getCurrentSource();\n                let dst = getCurrentDestination();\n                if (algorithm === \"BFS (Breadth First Search)\") {\n                    let results = BFS(initialGrid, src, dst);\n                    let [minPathLength, visitedNodes, shortestPathNodes] =\n                        results;\n                    if (visitedNodes.length !== 0) setAnimationInfo();\n                    let timer = 500;\n                    for (let i = 0; i < visitedNodes.length; ++i) {\n                        animateNodes(\n                            visitedNodes[i],\n                            timer,\n                            \"visited\",\n                            minPathLength\n                        );\n                        timer += 400;\n                    }\n                    if (shortestPathNodes.length > 0) {\n                        shortestPathNodes.reverse();\n                        for (let k = 0; k < shortestPathNodes.length; ++k) {\n                            animateNodes(\n                                [shortestPathNodes[k]],\n                                timer,\n                                \"path\",\n                                minPathLength\n                            );\n                            timer += 100;\n                        }\n                    } else {\n                        setTimeout(setNotFound, timer);\n                    }\n                } else if (algorithm === \"Bellman Ford Algorithm\") {\n                    let results = BellmanFord(initialGrid, src, dst);\n                    let [minPathLength, visitedNodes, shortestPathNodes] =\n                        results;\n                    if (visitedNodes.length !== 0) setAnimationInfo();\n                    let timer = 500;\n                    for (let i = 0; i < visitedNodes.length; ++i) {\n                        animateNodes(\n                            visitedNodes[i],\n                            timer,\n                            \"visited\",\n                            minPathLength\n                        );\n                        timer += 500;\n                    }\n                    if (shortestPathNodes.length > 0) {\n                        shortestPathNodes.reverse();\n                        for (let k = 0; k < shortestPathNodes.length; ++k) {\n                            animateNodes(\n                                [shortestPathNodes[k]],\n                                timer,\n                                \"path\",\n                                minPathLength\n                            );\n                            timer += 100;\n                        }\n                    } else {\n                        setTimeout(setNotFound, timer);\n                    }\n                } else if (algorithm === \"Floyd Warshall Algorithm\") {\n                    let results = FloydWarshall(initialGrid, src, dst);\n                    let [minPathLength, visitedNodes, shortestPathNodes] =\n                        results;\n                    if (visitedNodes.length !== 0) setAnimationInfo();\n                    let timer = 500;\n                    for (let i = 0; i < visitedNodes.length; ++i) {\n                        animateNodes(\n                            visitedNodes[i],\n                            timer,\n                            \"visited\",\n                            minPathLength\n                        );\n                        timer += 25;\n                    }\n                    if (shortestPathNodes.length > 0) {\n                        for (let k = 0; k < shortestPathNodes.length; ++k) {\n                            animateNodes(\n                                [shortestPathNodes[k]],\n                                timer,\n                                \"path\",\n                                minPathLength\n                            );\n                            timer += 100;\n                        }\n                    } else {\n                        setTimeout(setNotFound, timer);\n                    }\n                } else {\n                    let results = Dijkstra(grid, src, dst);\n                    let [minPathLength, visitedNodes, shortestPathNodes] =\n                        results;\n                    if (visitedNodes.length !== 0) setAnimationInfo();\n                    let timer = 200;\n                    for (let i = 0; i < visitedNodes.length; ++i) {\n                        animateNodes(\n                            visitedNodes[i],\n                            timer,\n                            \"visited\",\n                            minPathLength\n                        );\n                        timer += 50;\n                    }\n                    if (shortestPathNodes.length > 0) {\n                        shortestPathNodes.reverse();\n                        for (let k = 0; k < shortestPathNodes.length; ++k) {\n                            animateNodes(\n                                [shortestPathNodes[k]],\n                                timer,\n                                \"path\",\n                                minPathLength\n                            );\n                            timer += 100;\n                        }\n                    } else {\n                        setTimeout(setNotFound, timer);\n                    }\n                }\n            }\n        }\n    };\n\n    const toggleBackgroundBlur = () => {\n        let blur = document.getElementById(\"blur\");\n        blur.classList.toggle(\"active\");\n    };\n\n    return (\n        <div>\n            <div className=\"board\" id=\"blur\">\n                {/* Navbar */}\n                <div className=\"complete-navbar\">\n                    <div className=\"navbar justify-content-center app-header\">\n                        <p className=\"app-name\">Shortest Path Visualizer</p>\n                    </div>\n\n                    <div className=\"navbar justify-content-center\">\n                        <ul className=\"nav justify-content-center navbar-content\">\n                            <li\n                                className=\"dropdown nav-item\"\n                                data-bs-toggle=\"dropdown\"\n                            >\n                                <a\n                                    className=\"nav-link dropdown-toggle not-selectable\"\n                                    disabled={isAppRunning}\n                                >\n                                    {algorithm}\n                                </a>\n                                <ul className=\"dropdown-menu dropdown-menu-light\">\n                                    <li>\n                                        <a\n                                            className=\"dropdown-item\"\n                                            href=\"#\"\n                                            onClick={() => {\n                                                nullifyWeights();\n                                                setIsAlgorithm(true);\n                                                setAlgorithm(\n                                                    \"BFS (Breadth First Search)\"\n                                                );\n                                            }}\n                                        >\n                                            BFS (Breadth First Search)\n                                        </a>\n                                    </li>\n                                    <li>\n                                        <a\n                                            className=\"dropdown-item\"\n                                            href=\"#\"\n                                            onClick={() => {\n                                                showWeights();\n                                                setIsAlgorithm(true);\n                                                setAlgorithm(\n                                                    \"Dijkstra's Algorithm\"\n                                                );\n                                            }}\n                                        >\n                                            Dijkstra's Algorithm\n                                        </a>\n                                    </li>\n                                    <li>\n                                        <a\n                                            className=\"dropdown-item\"\n                                            href=\"#\"\n                                            onClick={() => {\n                                                showWeights();\n                                                setIsAlgorithm(true);\n                                                setAlgorithm(\n                                                    \"Bellman Ford Algorithm\"\n                                                );\n                                            }}\n                                        >\n                                            Bellman Ford Algorithm\n                                        </a>\n                                    </li>\n                                    <li>\n                                        <a\n                                            className=\"dropdown-item\"\n                                            href=\"#\"\n                                            onClick={() => {\n                                                showWeights();\n                                                setIsAlgorithm(true);\n                                                setAlgorithm(\n                                                    \"Floyd Warshall Algorithm\"\n                                                );\n                                            }}\n                                        >\n                                            Floyd Warshall Algorithm\n                                        </a>\n                                    </li>\n                                </ul>\n                            </li>\n                            <li className=\"nav-item\">\n                                <button\n                                    type=\"button\"\n                                    className=\"btn grad-text v-btn\"\n                                    onClick={visualize}\n                                    disabled={\n                                        isAppRunning ||\n                                        !isAlgorithm ||\n                                        !isPathClear\n                                    }\n                                >\n                                    &nbsp; Visualize &nbsp;\n                                </button>\n                            </li>\n                            <li className=\"nav-item\">\n                                <button\n                                    type=\"button\"\n                                    className=\"btn grad-text\"\n                                    onClick={clearPath}\n                                    disabled={isAppRunning}\n                                >\n                                    &nbsp; Clear Path &nbsp;\n                                </button>\n                            </li>\n                            <li className=\"nav-item\">\n                                <button\n                                    type=\"button\"\n                                    className=\"btn grad-text\"\n                                    onClick={clearWalls}\n                                    disabled={isAppRunning}\n                                >\n                                    &nbsp; Clear Walls &nbsp;\n                                </button>\n                            </li>\n                            <li className=\"nav-item\">\n                                <button\n                                    type=\"button\"\n                                    className=\"btn grad-text\"\n                                    onClick={resetGrid}\n                                    disabled={isAppRunning}\n                                >\n                                    &nbsp; Reset Grid &nbsp;\n                                </button>\n                            </li>\n                            <li className=\"nav-item\">\n                                <button\n                                    type=\"button\"\n                                    className=\"btn grad-text\"\n                                    onClick={reconfigureWeights}\n                                    disabled={isAppRunning}\n                                >\n                                    &nbsp; Reconfigure Weights &nbsp;\n                                </button>\n                            </li>\n                            <li className=\"nav-item\">\n                                <OverlayTrigger\n                                    key=\"top\"\n                                    placement=\"top\"\n                                    overlay={\n                                        <Tooltip id={`tooltip-top`}>\n                                            <strong>Meet the Algorithms</strong>\n                                        </Tooltip>\n                                    }\n                                    show={tooltipVisibility}\n                                >\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn grad-text\"\n                                        disabled={isAppRunning}\n                                        onClick={() => {\n                                            setTooltipVisibility(false);\n                                            toggleBackgroundBlur();\n                                            setAlgoInfoVisibility(true);\n                                        }}\n                                        onMouseEnter={() => {\n                                            setTooltipVisibility(true);\n                                        }}\n                                        onMouseLeave={() => {\n                                            setTooltipVisibility(false);\n                                        }}\n                                    >\n                                        <i className=\"fas fa-solid fa-laptop-code fa-lg\"></i>\n                                    </button>\n                                </OverlayTrigger>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n\n                {/* Visualizer */}\n                <div className=\"full-grid\">\n                    <div className=\"path-length not-selectable\">\n                        <p id=\"spf\" className=\"shortest-path-result\">\n                            {shortestPath}\n                        </p>\n                    </div>\n                    {initialGrid.map((row, rowIndex) => {\n                        return (\n                            <div key={rowIndex} className=\"rows\">\n                                {row.map((column, columnIndex) => {\n                                    return (\n                                        <div\n                                            className={getNodeClass(column)}\n                                            id={`${rowIndex}-${columnIndex}`}\n                                            key={columnIndex}\n                                            onMouseUp={() => {\n                                                handleMouseUp();\n                                            }}\n                                            onMouseDown={() => {\n                                                handleMouseDown(column);\n                                            }}\n                                            onMouseEnter={() => {\n                                                handleMouseEnter(column);\n                                            }}\n                                        >\n                                            <p className=\"not-selectable weight-value\">\n                                                {column.weight}\n                                            </p>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n            {/* Algorithm Info Modal */}\n            <Modal\n                show={algoInfoVisibility}\n                onHide={() => {\n                    setAlgoInfoVisibility(false);\n                }}\n                backdrop=\"static\"\n                size=\"xl\"\n                scrollable={true}\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title>Meet The Algorithms</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <AlgoInfo />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button\n                        variant=\"primary\"\n                        onClick={() => {\n                            toggleBackgroundBlur();\n                            setAlgoInfoVisibility(false);\n                        }}\n                        className=\"close-btn\"\n                    >\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n            {/* Tutorial Modal */}\n            <Modal\n                show={tutorialVisibility}\n                onHide={() => {\n                    setTutorialVisibility(false);\n                }}\n                backdrop=\"static\"\n                size=\"lg\"\n                scrollable={true}\n                id=\"tut-modal\"\n            >\n                <Modal.Body>\n                    <Tutorial modalID={modalID}></Tutorial>\n                </Modal.Body>\n                <Modal.Footer className=\"justify-content-between\">\n                    <Button\n                        variant=\"primary\"\n                        onClick={() => {\n                            setTutorialVisibility(false);\n                        }}\n                        className=\"skip-btn float-left\"\n                    >\n                        {`${\n                            modalID === totalModalPages\n                                ? \"Close\"\n                                : \"Skip Tutorial\"\n                        }`}\n                    </Button>\n                    <p className=\"modal-page-id\">{`${modalID} / ${totalModalPages}`}</p>\n                    <div>\n                        <Button\n                            className=\"tut-nav-btn\"\n                            variant=\"primary\"\n                            onClick={() => {\n                                setModalID(modalID - 1);\n                            }}\n                            disabled={modalID === 1}\n                        >\n                            Prev\n                        </Button>\n                        <Button\n                            className=\"tut-nav-btn\"\n                            variant=\"primary\"\n                            onClick={() => {\n                                setModalID(modalID + 1);\n                            }}\n                            disabled={modalID === totalModalPages}\n                        >\n                            Next\n                        </Button>\n                    </div>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    );\n};\n\nexport default Grid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}