{"ast":null,"code":"var _jsxFileName = \"/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/algorithms-info/info/FloydWarshallInfo.js\";\nimport Editor from \"@monaco-editor/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  readOnly: true,\n  minimap: {\n    enabled: false\n  },\n  automaticLayout: true,\n  scrollBeyondLastLine: false,\n  fontSize: \"13px\",\n  lineNumbers: \"off\",\n  glyphMargin: false,\n  folding: false,\n  lineDecorationsWidth: 5,\n  renderIndentGuides: false\n};\nconst FloydWarshallInfo = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Floyd Warshall All-Pair-Shortest-Path (APSP) algorithm is a dynamic programming based algorithm, that computes shortest distances between all possible pair(source, destination) of vertices. This algorithm is relatively slower than even Bellman Ford algorithm. For even slightly higher number of vertices this algorithm takes quite some time to compute all pair shortest paths.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The crucial advantage of this algorithm is that, after computation, it gives shortest paths among all possible pairs of source and destination vertex, iff path exists.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n_c = FloydWarshallInfo;\nexport default FloydWarshallInfo;\nvar _c;\n$RefreshReg$(_c, \"FloydWarshallInfo\");","map":{"version":3,"names":["Editor","options","readOnly","minimap","enabled","automaticLayout","scrollBeyondLastLine","fontSize","lineNumbers","glyphMargin","folding","lineDecorationsWidth","renderIndentGuides","FloydWarshallInfo"],"sources":["/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/algorithms-info/info/FloydWarshallInfo.js"],"sourcesContent":["import Editor from \"@monaco-editor/react\";\n\nconst options = {\n    readOnly: true,\n    minimap: { enabled: false },\n    automaticLayout: true,\n    scrollBeyondLastLine: false,\n    fontSize: \"13px\",\n    lineNumbers: \"off\",\n    glyphMargin: false,\n    folding: false,\n    lineDecorationsWidth: 5,\n    renderIndentGuides: false,\n};\n\nconst FloydWarshallInfo = () => {\n    return (\n        <div>\n            <p>\n                Floyd Warshall All-Pair-Shortest-Path (APSP) algorithm is a\n                dynamic programming based algorithm, that computes shortest\n                distances between all possible pair(source, destination) of\n                vertices. This algorithm is relatively slower than even Bellman\n                Ford algorithm. For even slightly higher number of vertices this\n                algorithm takes quite some time to compute all pair shortest\n                paths.\n            </p>\n            <p>\n                The crucial advantage of this algorithm is that, after\n                computation, it gives shortest paths among all possible pairs of\n                source and destination vertex, iff path exists.\n            </p>\n        </div>\n    );\n};\n\nexport default FloydWarshallInfo;\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,sBAAsB;AAAC;AAE1C,MAAMC,OAAO,GAAG;EACZC,QAAQ,EAAE,IAAI;EACdC,OAAO,EAAE;IAAEC,OAAO,EAAE;EAAM,CAAC;EAC3BC,eAAe,EAAE,IAAI;EACrBC,oBAAoB,EAAE,KAAK;EAC3BC,QAAQ,EAAE,MAAM;EAChBC,WAAW,EAAE,KAAK;EAClBC,WAAW,EAAE,KAAK;EAClBC,OAAO,EAAE,KAAK;EACdC,oBAAoB,EAAE,CAAC;EACvBC,kBAAkB,EAAE;AACxB,CAAC;AAED,MAAMC,iBAAiB,GAAG,MAAM;EAC5B,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAQI,eACJ;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAII;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEd,CAAC;AAAC,KAnBIA,iBAAiB;AAqBvB,eAAeA,iBAAiB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}