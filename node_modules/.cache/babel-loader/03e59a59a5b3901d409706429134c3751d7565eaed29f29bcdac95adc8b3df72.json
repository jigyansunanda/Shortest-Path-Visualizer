{"ast":null,"code":"var _jsxFileName = \"/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/grid/Grid.js\";\nimport React, { useState } from \"react\";\nimport \"./Grid.css\";\n// import Node from \"./node/Node\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateRandomNumber = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nconst [totalRows, totalCols] = [20, 40];\nvar sourceRow = 10;\nvar sourceCol = 10;\nvar destinationRow = 10;\nvar destinationCol = 30;\nvar grid = [];\nvar weight = [];\nclass Vertex {\n  constructor(x, y) {\n    this.row = x;\n    this.col = y;\n    this.isWall = false;\n    this.isSource = x === sourceRow && y === sourceCol;\n    this.isDestination = x === destinationRow && y === destinationCol;\n    this.weight = weight[x][y];\n  }\n}\nconst initializeWeights = () => {\n  for (let row = 0; row < totalRows; ++row) {\n    let weightOfColumns = [];\n    for (let col = 0; col < totalCols; ++col) {\n      let weight = generateRandomNumber(10, 30);\n      weightOfColumns.push(weight);\n    }\n    weight.push(weightOfColumns);\n  }\n};\ninitializeWeights();\nconst createVertices = () => {\n  for (let row = 0; row < totalRows; ++row) {\n    let columns = [];\n    for (let col = 0; col < totalCols; ++col) {\n      columns.push(new Vertex(row, col));\n    }\n    grid.push(columns);\n  }\n};\ncreateVertices();\nconst getNodeClass = (isSource, isDestination, isWall) => {\n  let nodeType = \"node\";\n  if (isSource) {\n    nodeType += \" source-node\";\n  } else if (isDestination) {\n    nodeType += \" destination-node\";\n  } else if (isWall) {\n    nodeType += \" wall-node\";\n  }\n  return nodeType;\n};\n\n// var isMouseDown = false;\n\nclass Grid extends React.Component {\n  render() {\n    let isMouseDown = false;\n    const [initialGrid, setGrid] = useState(grid);\n    const [initialMouseState, setMouseState] = useState({\n      isMouseDown: false\n    });\n    const handleMouseUp = () => {\n      setMouseState(false);\n      // isMouseDown = false;\n      console.log(`handleMouseUp -> isMouseDown ${isMouseDown}`);\n    };\n    const handleMouseDown = () => {\n      setMouseState(true);\n      // isMouseDown = true;\n      console.log(`handleMouseDown -> isMouseDown ${isMouseDown}`);\n    };\n    const handleMouseEnter = () => {\n      if (isMouseDown) {\n        console.log(\"Mouse moving through\");\n      }\n      // console.log(isMouseDown);\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"full-grid\",\n        onMouseUp: handleMouseUp,\n        onMouseDown: handleMouseDown,\n        children: grid.map((row, rowIndex) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: row.map((column, columnIndex) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: getNodeClass(column.isSource, column.isDestination, column.isWall),\n                row: column.row,\n                col: column.col,\n                nodeType: getNodeClass(column.isSource, column.isDestination, column.isWall),\n                nodeWeight: column.weight,\n                isSource: column.isSource,\n                isDestination: column.isDestination,\n                isWall: column.isWall,\n                onMouseEnter: handleMouseEnter,\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: column.weight\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 45\n                }, this)\n              }, columnIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 41\n              }, this);\n            })\n          }, rowIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shortest-path-result\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Shortest path is impossible\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Grid;","map":{"version":3,"names":["React","useState","generateRandomNumber","min","max","Math","ceil","floor","random","totalRows","totalCols","sourceRow","sourceCol","destinationRow","destinationCol","grid","weight","Vertex","constructor","x","y","row","col","isWall","isSource","isDestination","initializeWeights","weightOfColumns","push","createVertices","columns","getNodeClass","nodeType","Grid","Component","render","isMouseDown","initialGrid","setGrid","initialMouseState","setMouseState","handleMouseUp","console","log","handleMouseDown","handleMouseEnter","map","rowIndex","column","columnIndex"],"sources":["/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/grid/Grid.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./Grid.css\";\n// import Node from \"./node/Node\";\n\nconst generateRandomNumber = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst [totalRows, totalCols] = [20, 40];\n\nvar sourceRow = 10;\nvar sourceCol = 10;\nvar destinationRow = 10;\nvar destinationCol = 30;\n\nvar grid = [];\nvar weight = [];\n\nclass Vertex {\n    constructor(x, y) {\n        this.row = x;\n        this.col = y;\n        this.isWall = false;\n        this.isSource = x === sourceRow && y === sourceCol;\n        this.isDestination = x === destinationRow && y === destinationCol;\n        this.weight = weight[x][y];\n    }\n}\n\nconst initializeWeights = () => {\n    for (let row = 0; row < totalRows; ++row) {\n        let weightOfColumns = [];\n        for (let col = 0; col < totalCols; ++col) {\n            let weight = generateRandomNumber(10, 30);\n            weightOfColumns.push(weight);\n        }\n        weight.push(weightOfColumns);\n    }\n};\n\ninitializeWeights();\n\nconst createVertices = () => {\n    for (let row = 0; row < totalRows; ++row) {\n        let columns = [];\n        for (let col = 0; col < totalCols; ++col) {\n            columns.push(new Vertex(row, col));\n        }\n        grid.push(columns);\n    }\n};\n\ncreateVertices();\n\nconst getNodeClass = (isSource, isDestination, isWall) => {\n    let nodeType = \"node\";\n    if (isSource) {\n        nodeType += \" source-node\";\n    } else if (isDestination) {\n        nodeType += \" destination-node\";\n    } else if (isWall) {\n        nodeType += \" wall-node\";\n    }\n    return nodeType;\n};\n\n// var isMouseDown = false;\n\nclass Grid extends React.Component {\n    render() {\n        let isMouseDown = false;\n        const [initialGrid, setGrid] = useState(grid);\n        const [initialMouseState, setMouseState] = useState({\n            isMouseDown: false,\n        });\n        const handleMouseUp = () => {\n            setMouseState(false);\n            // isMouseDown = false;\n            console.log(`handleMouseUp -> isMouseDown ${isMouseDown}`);\n        };\n        const handleMouseDown = () => {\n            setMouseState(true);\n            // isMouseDown = true;\n            console.log(`handleMouseDown -> isMouseDown ${isMouseDown}`);\n        };\n        const handleMouseEnter = () => {\n            if (isMouseDown) {\n                console.log(\"Mouse moving through\");\n            }\n            // console.log(isMouseDown);\n        };\n        return (\n            <div className=\"board\">\n                <div\n                    className=\"full-grid\"\n                    onMouseUp={handleMouseUp}\n                    onMouseDown={handleMouseDown}\n                >\n                    {grid.map((row, rowIndex) => {\n                        return (\n                            <div key={rowIndex} className=\"row\">\n                                {row.map((column, columnIndex) => {\n                                    return (\n                                        <div\n                                            className={getNodeClass(\n                                                column.isSource,\n                                                column.isDestination,\n                                                column.isWall\n                                            )}\n                                            key={columnIndex}\n                                            row={column.row}\n                                            col={column.col}\n                                            nodeType={getNodeClass(\n                                                column.isSource,\n                                                column.isDestination,\n                                                column.isWall\n                                            )}\n                                            nodeWeight={column.weight}\n                                            isSource={column.isSource}\n                                            isDestination={column.isDestination}\n                                            isWall={column.isWall}\n                                            onMouseEnter={handleMouseEnter}\n                                        >\n                                            <p>{column.weight}</p>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        );\n                    })}\n                </div>\n                <div className=\"shortest-path-result\">\n                    <p>Shortest path is impossible</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Grid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}