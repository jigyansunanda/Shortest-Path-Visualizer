{"ast":null,"code":"import PriorityQueue from \"../data-structures/PriorityQueue\";\nconst [totalRows, totalCols] = [20, 30];\nconst dx = [0, 1, 0, -1];\nconst dy = [1, 0, -1, 0];\nconst isValid = (r, c) => {\n  return r >= 0 && c >= 0 && r < totalRows && c < totalCols;\n};\nconst Dijkstra = (grid, src, dst) => {\n  let distance = [];\n  let parentNodes = [];\n  for (let row = 0; row < totalRows; ++row) {\n    let d = [];\n    let p = [];\n    for (let col = 0; col < totalCols; ++col) {\n      d.push(Infinity);\n      p.push(null);\n    }\n    distance.push(d);\n    parentNodes.push(p);\n  }\n  let pq = new PriorityQueue();\n  pq.insert([123, 1]);\n  pq.insert([23, 534]);\n  pq.insert([87, 12]);\n  while (pq.empty() === false) {\n    let curr = pq.extractMin();\n    console.log(curr);\n  }\n};\n_c = Dijkstra;\nexport default Dijkstra;\nvar _c;\n$RefreshReg$(_c, \"Dijkstra\");","map":{"version":3,"names":["PriorityQueue","totalRows","totalCols","dx","dy","isValid","r","c","Dijkstra","grid","src","dst","distance","parentNodes","row","d","p","col","push","Infinity","pq","insert","empty","curr","extractMin","console","log"],"sources":["/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/algorithms/Dijkstra.js"],"sourcesContent":["import PriorityQueue from \"../data-structures/PriorityQueue\";\n\nconst [totalRows, totalCols] = [20, 30];\nconst dx = [0, 1, 0, -1];\nconst dy = [1, 0, -1, 0];\n\nconst isValid = (r, c) => {\n    return r >= 0 && c >= 0 && r < totalRows && c < totalCols;\n};\n\nconst Dijkstra = (grid, src, dst) => {\n    let distance = [];\n    let parentNodes = [];\n    for (let row = 0; row < totalRows; ++row) {\n        let d = [];\n        let p = [];\n        for (let col = 0; col < totalCols; ++col) {\n            d.push(Infinity);\n            p.push(null);\n        }\n        distance.push(d);\n        parentNodes.push(p);\n    }\n    let pq = new PriorityQueue();\n    pq.insert([123, 1]);\n    pq.insert([23, 534]);\n    pq.insert([87, 12]);\n    while (pq.empty() === false) {\n        let curr = pq.extractMin();\n        console.log(curr);\n    }\n};\n\nexport default Dijkstra;\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,kCAAkC;AAE5D,MAAM,CAACC,SAAS,EAAEC,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;AACvC,MAAMC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACxB,MAAMC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AAExB,MAAMC,OAAO,GAAG,CAACC,CAAC,EAAEC,CAAC,KAAK;EACtB,OAAOD,CAAC,IAAI,CAAC,IAAIC,CAAC,IAAI,CAAC,IAAID,CAAC,GAAGL,SAAS,IAAIM,CAAC,GAAGL,SAAS;AAC7D,CAAC;AAED,MAAMM,QAAQ,GAAG,CAACC,IAAI,EAAEC,GAAG,EAAEC,GAAG,KAAK;EACjC,IAAIC,QAAQ,GAAG,EAAE;EACjB,IAAIC,WAAW,GAAG,EAAE;EACpB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGb,SAAS,EAAE,EAAEa,GAAG,EAAE;IACtC,IAAIC,CAAC,GAAG,EAAE;IACV,IAAIC,CAAC,GAAG,EAAE;IACV,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGf,SAAS,EAAE,EAAEe,GAAG,EAAE;MACtCF,CAAC,CAACG,IAAI,CAACC,QAAQ,CAAC;MAChBH,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC;IAChB;IACAN,QAAQ,CAACM,IAAI,CAACH,CAAC,CAAC;IAChBF,WAAW,CAACK,IAAI,CAACF,CAAC,CAAC;EACvB;EACA,IAAII,EAAE,GAAG,IAAIpB,aAAa,EAAE;EAC5BoB,EAAE,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;EACnBD,EAAE,CAACC,MAAM,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;EACpBD,EAAE,CAACC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;EACnB,OAAOD,EAAE,CAACE,KAAK,EAAE,KAAK,KAAK,EAAE;IACzB,IAAIC,IAAI,GAAGH,EAAE,CAACI,UAAU,EAAE;IAC1BC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;EACrB;AACJ,CAAC;AAAC,KArBIf,QAAQ;AAuBd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}