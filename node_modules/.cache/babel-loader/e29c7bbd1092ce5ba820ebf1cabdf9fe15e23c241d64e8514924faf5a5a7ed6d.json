{"ast":null,"code":"var _jsxFileName = \"/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/grid/Grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport BFS from \"../../algorithms/BFS\";\nimport Dijkstra from \"../../algorithms/Dijkstra\";\nimport BellmanFord from \"../../algorithms/BellmanFord\";\nimport FloydWarshall from \"../../algorithms/FloydWarshall\";\nimport \"./Grid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateRandomNumber = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nconst [totalRows, totalCols] = [20, 30];\nvar [sourceRow, sourceCol, destinationRow, destinationCol] = [10, 10, 10, 20];\nvar grid = [];\nvar weight = [];\nclass Node {\n  constructor(x, y) {\n    this.row = x;\n    this.col = y;\n    this.isWall = false;\n    this.isSource = x === sourceRow && y === sourceCol;\n    this.isDestination = x === destinationRow && y === destinationCol;\n    this.isVisited = false;\n    this.isPath = false;\n    this.weight = weight[x][y];\n  }\n}\nconst initializeWeights = () => {\n  weight = [];\n  for (let row = 0; row < totalRows; ++row) {\n    let weightOfColumns = [];\n    for (let col = 0; col < totalCols; ++col) {\n      let weight = generateRandomNumber(10, 30);\n      weightOfColumns.push(weight);\n    }\n    weight.push(weightOfColumns);\n  }\n};\ninitializeWeights();\nvar previousSource;\nvar previousDestination;\nconst createVertices = () => {\n  grid = [];\n  for (let row = 0; row < totalRows; ++row) {\n    let columns = [];\n    for (let col = 0; col < totalCols; ++col) {\n      columns.push(new Node(row, col));\n    }\n    grid.push(columns);\n  }\n  previousSource = grid[sourceRow][sourceCol];\n  previousDestination = grid[destinationRow][destinationCol];\n};\ncreateVertices();\nconst Grid = () => {\n  _s();\n  const [initialGrid, setGrid] = useState(grid);\n  const [currSource, setCurrSource] = useState([10, 10]);\n  const [currDestination, setCurrDestination] = useState([10, 20]);\n  const [isMouseDown, setMouseDown] = useState(false);\n  const [isSourceSelected, setSourceSelected] = useState(false);\n  const [isDestinationSelected, setDestinationSelected] = useState(false);\n  const [algorithm, setAlgorithm] = useState(\"Select Algorithm\");\n  const [isAlgorithm, setIsAlgorithm] = useState(false);\n  const [isAppRunning, setAppRunning] = useState(false);\n  const [shortestPath, setShortestPath] = useState(`Source: (10, 10) ${\"    \"} Destination: (10, 20)`);\n  const resetSourceAndDestination = () => {\n    [sourceRow, sourceCol, destinationRow, destinationCol] = [10, 10, 10, 20];\n    previousSource = initialGrid[sourceRow][sourceCol];\n    previousDestination = initialGrid[destinationRow][destinationCol];\n    setGrid([...initialGrid]);\n  };\n  const getNodeClass = node => {\n    let nodeType = \"node\";\n    if (node.isSource === true) {\n      nodeType += \" source-node\";\n    } else if (node.isDestination === true) {\n      nodeType += \" destination-node\";\n    } else if (node.isWall === true) {\n      nodeType += \" wall-node\";\n    } else if (node.isPath === true) {\n      nodeType += \" node-shortest-path\";\n    } else if (node.isVisited === true) {\n      nodeType += \" node-visited\";\n    }\n    return nodeType;\n  };\n  const handleMouseUp = () => {\n    setMouseDown(false);\n    if (isSourceSelected) setSourceSelected(false);\n    if (isDestinationSelected) setDestinationSelected(false);\n  };\n  const handleMouseDown = node => {\n    if (isAppRunning === false) {\n      if (node.isWall === false) {\n        node.isWall = true;\n        setMouseDown(true);\n        if (node.isSource) setSourceSelected(true);\n        if (node.isDestination) setDestinationSelected(true);\n      }\n    }\n  };\n  const handleMouseEnter = node => {\n    if (isMouseDown) {\n      if (isSourceSelected) {\n        if (!node.isSource && !node.isDestination && !node.isWall) {\n          previousSource.isSource = false;\n          previousSource.isDestination = false;\n          previousSource.isWall = false;\n          node.isSource = true;\n          previousSource = node;\n          setCurrSource([node.row, node.col]);\n        }\n      } else if (isDestinationSelected) {\n        if (!node.isSource && !node.isDestination && !node.isWall) {\n          previousDestination.isSource = false;\n          previousDestination.isDestination = false;\n          previousDestination.isWall = false;\n          node.isDestination = true;\n          previousDestination = node;\n          setCurrDestination([node.row, node.col]);\n        }\n      } else {\n        if (!node.isSource && !node.isDestination && !node.isWall) {\n          node.isWall = true;\n        }\n      }\n      setShortestPath(`Source: (${currSource[0]}, ${currSource[1]})   Destination: (${currDestination[0]}, ${currDestination[1]})`);\n      setGrid([...initialGrid]);\n    }\n  };\n  const clearWalls = () => {\n    if (isAppRunning === false) {\n      for (let row = 0; row < totalRows; ++row) {\n        for (let col = 0; col < totalCols; ++col) {\n          initialGrid[row][col].isWall = false;\n          initialGrid[row][col].isVisited = false;\n        }\n      }\n      setGrid([...initialGrid]);\n      setShortestPath(\"Shortest path has not been found yet.\");\n    }\n  };\n  const clearPath = () => {\n    if (isAppRunning === false) {\n      for (let row = 0; row < totalRows; ++row) {\n        for (let col = 0; col < totalCols; ++col) {\n          initialGrid[row][col].isPath = false;\n          initialGrid[row][col].isVisited = false;\n        }\n      }\n      setGrid([...initialGrid]);\n      setAlgorithm(\"Select Algorithm\");\n      showWeights();\n      setShortestPath(\"Shortest path has not been found yet.\");\n    }\n  };\n  const resetGrid = () => {\n    if (isAppRunning === false) {\n      resetSourceAndDestination();\n      for (let row = 0; row < totalRows; ++row) {\n        for (let col = 0; col < totalCols; ++col) {\n          initialGrid[row][col].isPath = false;\n          initialGrid[row][col].isWall = false;\n          initialGrid[row][col].isVisited = false;\n          initialGrid[row][col].isSource = row === sourceRow && col === sourceCol;\n          initialGrid[row][col].isDestination = row === destinationRow && col === destinationCol;\n        }\n      }\n      setGrid([...initialGrid]);\n      setAlgorithm(\"Select Algorithm\");\n      showWeights();\n      setShortestPath(\"Shortest path has not been found yet.\");\n    }\n  };\n  const reconfigureWeights = () => {\n    if (isAppRunning === false) {\n      for (let row = 0; row < totalRows; ++row) {\n        for (let col = 0; col < totalCols; ++col) {\n          weight[row][col] = generateRandomNumber(10, 30);\n          initialGrid[row][col].weight = weight[row][col];\n          initialGrid[row][col].isVisited = false;\n        }\n      }\n      setGrid([...initialGrid]);\n      setAlgorithm(\"Select Algorithm\");\n      showWeights();\n      setShortestPath(\"Shortest path has not been found yet.\");\n    }\n  };\n  const getCurrentSource = () => {\n    for (let row = 0; row < totalRows; ++row) {\n      for (let col = 0; col < totalCols; ++col) {\n        if (initialGrid[row][col].isSource === true) {\n          return initialGrid[row][col];\n        }\n      }\n    }\n    return initialGrid[sourceRow][sourceCol]; // Ideally would never reach here.\n  };\n\n  const getCurrentDestination = () => {\n    for (let row = 0; row < totalRows; ++row) {\n      for (let col = 0; col < totalCols; ++col) {\n        if (initialGrid[row][col].isDestination === true) {\n          return initialGrid[row][col];\n        }\n      }\n    }\n    return initialGrid[destinationRow][destinationCol]; // Ideally would never reach here.\n  };\n\n  const nullifyWeights = () => {\n    let weights = document.getElementsByClassName(\"weight-value\");\n    for (let i = 0; i < weights.length; ++i) {\n      weights[i].className = \"not-selectable weight-value hidden\";\n    }\n    setGrid([...initialGrid]);\n  };\n  const showWeights = () => {\n    let weights = document.getElementsByClassName(\"weight-value\");\n    for (let i = 0; i < weights.length; ++i) {\n      weights[i].className = \"not-selectable weight-value\";\n    }\n    setGrid([...initialGrid]);\n  };\n  const animateNodes = (nodes, timer, nodeType, minPathLength) => {\n    setTimeout(() => {\n      if (nodeType === \"visited\") {\n        for (let i = 0; i < nodes.length; ++i) {\n          nodes[i].isVisited = true;\n        }\n        setGrid([...initialGrid]);\n      } else {\n        for (let i = 0; i < nodes.length; ++i) {\n          nodes[i].isPath = true;\n        }\n        setGrid([...initialGrid]);\n        if (minPathLength === Infinity) {\n          setShortestPath(\"Destination is not reachable from source\");\n        } else {\n          setShortestPath(`Shortest path length from source to destination is ${minPathLength}`);\n        }\n        setAppRunning(false);\n        setIsAlgorithm(false);\n        setAlgorithm(\"Select Algorithm\");\n      }\n    }, timer);\n  };\n  const visualize = () => {\n    if (isAppRunning === false) {\n      if (algorithm === \"Select Algorithm\") {\n        alert(\"Select Algorithm to visualize\");\n      } else {\n        setAppRunning(true);\n        let src = getCurrentSource();\n        let dst = getCurrentDestination();\n        if (algorithm === \"BFS (Breadth First Search)\") {\n          let results = BFS(initialGrid, src, dst);\n          let [minPathLength, visitedNodes, shortestPathNodes] = results;\n          let timer = 500;\n          for (let i = 0; i < visitedNodes.length; ++i) {\n            animateNodes(visitedNodes[i], timer, \"visited\", minPathLength);\n            timer += 500;\n          }\n          animateNodes(shortestPathNodes, timer, \"path\", minPathLength);\n        } else if (algorithm === \"Bellman Ford Algorithm\") {\n          let results = BellmanFord(initialGrid, src, dst);\n          let [minPathLength, visitedNodes, shortestPathNodes] = results;\n          let timer = 500;\n          for (let i = 0; i < visitedNodes.length; ++i) {\n            animateNodes(visitedNodes[i], timer, \"visited\", minPathLength);\n            timer += 500;\n          }\n          animateNodes(shortestPathNodes, timer, \"path\", minPathLength);\n        } else if (algorithm === \"Floyd Warshall Algorithm\") {\n          let results = FloydWarshall(initialGrid, src, dst);\n          let [minPathLength, visitedNodes, shortestPathNodes] = results;\n          let timer = 500;\n          animateNodes(shortestPathNodes, timer, \"path\", minPathLength);\n        } else {\n          let results = Dijkstra(grid, src, dst);\n          let [minPathLength, visitedNodes, shortestPathNodes] = results;\n          console.log(shortestPathNodes);\n          let timer = 200;\n          for (let i = 0; i < visitedNodes.length; ++i) {\n            animateNodes(visitedNodes[i], timer, \"visited\", minPathLength);\n            timer += 50;\n          }\n          animateNodes(shortestPathNodes, timer, \"path\", minPathLength);\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"complete-navbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar justify-content-center app-header\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"app-name\",\n          children: \"Shortest Path Visualizer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"nav justify-content-center navbar-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"dropdown nav-item\",\n            \"data-bs-toggle\": \"dropdown\",\n            children: [/*#__PURE__*/_jsxDEV(\"a\", {\n              className: \"nav-link dropdown-toggle not-selectable\",\n              disabled: isAppRunning,\n              children: algorithm\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"dropdown-menu dropdown-menu-light\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  className: \"dropdown-item\",\n                  href: \"#\",\n                  onClick: () => {\n                    nullifyWeights();\n                    setIsAlgorithm(true);\n                    setAlgorithm(\"BFS (Breadth First Search)\");\n                  },\n                  children: \"BFS (Breadth First Search)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 390,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  className: \"dropdown-item\",\n                  href: \"#\",\n                  onClick: () => {\n                    showWeights();\n                    setIsAlgorithm(true);\n                    setAlgorithm(\"Dijkstra's Algorithm\");\n                  },\n                  children: \"Dijkstra's Algorithm\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 405,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 404,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  className: \"dropdown-item\",\n                  href: \"#\",\n                  onClick: () => {\n                    showWeights();\n                    setIsAlgorithm(true);\n                    setAlgorithm(\"Bellman Ford Algorithm\");\n                  },\n                  children: \"Bellman Ford Algorithm\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 420,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  className: \"dropdown-item\",\n                  href: \"#\",\n                  onClick: () => {\n                    showWeights();\n                    setIsAlgorithm(true);\n                    setAlgorithm(\"Floyd Warshall Algorithm\");\n                  },\n                  children: \"Floyd Warshall Algorithm\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 435,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn grad-text v-btn\",\n              onClick: visualize,\n              disabled: isAppRunning || !isAlgorithm,\n              children: \"\\xA0 Visualize \\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn grad-text\",\n              onClick: clearWalls,\n              disabled: isAppRunning,\n              children: \"\\xA0 Clear Walls \\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn grad-text\",\n              onClick: clearPath,\n              disabled: isAppRunning,\n              children: \"\\xA0 Clear Path \\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn grad-text\",\n              onClick: resetGrid,\n              disabled: isAppRunning,\n              children: \"\\xA0 Reset Grid \\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn grad-text\",\n              onClick: reconfigureWeights,\n              disabled: isAppRunning,\n              children: \"\\xA0 Reconfigure Weights \\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn grad-text\",\n              disabled: isAppRunning,\n              children: \"\\xA0 Tutorial \\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"full-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"path-length not-selectable\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"shortest-path-result\",\n          children: shortestPath\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 17\n      }, this), initialGrid.map((row, rowIndex) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rows\",\n          children: row.map((column, columnIndex) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: getNodeClass(column),\n              id: `${rowIndex}-${columnIndex}`,\n              onMouseUp: () => {\n                handleMouseUp();\n              },\n              onMouseDown: () => {\n                handleMouseDown(column);\n              },\n              onMouseEnter: () => {\n                handleMouseEnter(column);\n              },\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"not-selectable weight-value\",\n                children: column.weight\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 538,\n                columnNumber: 41\n              }, this)\n            }, columnIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 37\n            }, this);\n          })\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 369,\n    columnNumber: 9\n  }, this);\n};\n_s(Grid, \"RjLcoGtrVXbzGPdRAvUF/xb1czU=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","BFS","Dijkstra","BellmanFord","FloydWarshall","generateRandomNumber","min","max","Math","ceil","floor","random","totalRows","totalCols","sourceRow","sourceCol","destinationRow","destinationCol","grid","weight","Node","constructor","x","y","row","col","isWall","isSource","isDestination","isVisited","isPath","initializeWeights","weightOfColumns","push","previousSource","previousDestination","createVertices","columns","Grid","initialGrid","setGrid","currSource","setCurrSource","currDestination","setCurrDestination","isMouseDown","setMouseDown","isSourceSelected","setSourceSelected","isDestinationSelected","setDestinationSelected","algorithm","setAlgorithm","isAlgorithm","setIsAlgorithm","isAppRunning","setAppRunning","shortestPath","setShortestPath","resetSourceAndDestination","getNodeClass","node","nodeType","handleMouseUp","handleMouseDown","handleMouseEnter","clearWalls","clearPath","showWeights","resetGrid","reconfigureWeights","getCurrentSource","getCurrentDestination","nullifyWeights","weights","document","getElementsByClassName","i","length","className","animateNodes","nodes","timer","minPathLength","setTimeout","Infinity","visualize","alert","src","dst","results","visitedNodes","shortestPathNodes","console","log","map","rowIndex","column","columnIndex"],"sources":["/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/grid/Grid.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport BFS from \"../../algorithms/BFS\";\nimport Dijkstra from \"../../algorithms/Dijkstra\";\nimport BellmanFord from \"../../algorithms/BellmanFord\";\nimport FloydWarshall from \"../../algorithms/FloydWarshall\";\nimport \"./Grid.css\";\n\nconst generateRandomNumber = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst [totalRows, totalCols] = [20, 30];\n\nvar [sourceRow, sourceCol, destinationRow, destinationCol] = [10, 10, 10, 20];\n\nvar grid = [];\nvar weight = [];\n\nclass Node {\n    constructor(x, y) {\n        this.row = x;\n        this.col = y;\n        this.isWall = false;\n        this.isSource = x === sourceRow && y === sourceCol;\n        this.isDestination = x === destinationRow && y === destinationCol;\n        this.isVisited = false;\n        this.isPath = false;\n        this.weight = weight[x][y];\n    }\n}\n\nconst initializeWeights = () => {\n    weight = [];\n    for (let row = 0; row < totalRows; ++row) {\n        let weightOfColumns = [];\n        for (let col = 0; col < totalCols; ++col) {\n            let weight = generateRandomNumber(10, 30);\n            weightOfColumns.push(weight);\n        }\n        weight.push(weightOfColumns);\n    }\n};\n\ninitializeWeights();\n\nvar previousSource;\nvar previousDestination;\n\nconst createVertices = () => {\n    grid = [];\n    for (let row = 0; row < totalRows; ++row) {\n        let columns = [];\n        for (let col = 0; col < totalCols; ++col) {\n            columns.push(new Node(row, col));\n        }\n        grid.push(columns);\n    }\n    previousSource = grid[sourceRow][sourceCol];\n    previousDestination = grid[destinationRow][destinationCol];\n};\n\ncreateVertices();\n\nconst Grid = () => {\n    const [initialGrid, setGrid] = useState(grid);\n    const [currSource, setCurrSource] = useState([10, 10]);\n    const [currDestination, setCurrDestination] = useState([10, 20]);\n    const [isMouseDown, setMouseDown] = useState(false);\n    const [isSourceSelected, setSourceSelected] = useState(false);\n    const [isDestinationSelected, setDestinationSelected] = useState(false);\n    const [algorithm, setAlgorithm] = useState(\"Select Algorithm\");\n    const [isAlgorithm, setIsAlgorithm] = useState(false);\n    const [isAppRunning, setAppRunning] = useState(false);\n    const [shortestPath, setShortestPath] = useState(\n        `Source: (10, 10) ${\"    \"} Destination: (10, 20)`\n    );\n\n    const resetSourceAndDestination = () => {\n        [sourceRow, sourceCol, destinationRow, destinationCol] = [\n            10, 10, 10, 20,\n        ];\n        previousSource = initialGrid[sourceRow][sourceCol];\n        previousDestination = initialGrid[destinationRow][destinationCol];\n        setGrid([...initialGrid]);\n    };\n\n    const getNodeClass = (node) => {\n        let nodeType = \"node\";\n        if (node.isSource === true) {\n            nodeType += \" source-node\";\n        } else if (node.isDestination === true) {\n            nodeType += \" destination-node\";\n        } else if (node.isWall === true) {\n            nodeType += \" wall-node\";\n        } else if (node.isPath === true) {\n            nodeType += \" node-shortest-path\";\n        } else if (node.isVisited === true) {\n            nodeType += \" node-visited\";\n        }\n        return nodeType;\n    };\n\n    const handleMouseUp = () => {\n        setMouseDown(false);\n        if (isSourceSelected) setSourceSelected(false);\n        if (isDestinationSelected) setDestinationSelected(false);\n    };\n\n    const handleMouseDown = (node) => {\n        if (isAppRunning === false) {\n            if (node.isWall === false) {\n                node.isWall = true;\n                setMouseDown(true);\n                if (node.isSource) setSourceSelected(true);\n                if (node.isDestination) setDestinationSelected(true);\n            }\n        }\n    };\n\n    const handleMouseEnter = (node) => {\n        if (isMouseDown) {\n            if (isSourceSelected) {\n                if (!node.isSource && !node.isDestination && !node.isWall) {\n                    previousSource.isSource = false;\n                    previousSource.isDestination = false;\n                    previousSource.isWall = false;\n                    node.isSource = true;\n                    previousSource = node;\n                    setCurrSource([node.row, node.col]);\n                }\n            } else if (isDestinationSelected) {\n                if (!node.isSource && !node.isDestination && !node.isWall) {\n                    previousDestination.isSource = false;\n                    previousDestination.isDestination = false;\n                    previousDestination.isWall = false;\n                    node.isDestination = true;\n                    previousDestination = node;\n                    setCurrDestination([node.row, node.col]);\n                }\n            } else {\n                if (!node.isSource && !node.isDestination && !node.isWall) {\n                    node.isWall = true;\n                }\n            }\n            setShortestPath(\n                `Source: (${currSource[0]}, ${currSource[1]})   Destination: (${currDestination[0]}, ${currDestination[1]})`\n            );\n            setGrid([...initialGrid]);\n        }\n    };\n\n    const clearWalls = () => {\n        if (isAppRunning === false) {\n            for (let row = 0; row < totalRows; ++row) {\n                for (let col = 0; col < totalCols; ++col) {\n                    initialGrid[row][col].isWall = false;\n                    initialGrid[row][col].isVisited = false;\n                }\n            }\n            setGrid([...initialGrid]);\n            setShortestPath(\"Shortest path has not been found yet.\");\n        }\n    };\n\n    const clearPath = () => {\n        if (isAppRunning === false) {\n            for (let row = 0; row < totalRows; ++row) {\n                for (let col = 0; col < totalCols; ++col) {\n                    initialGrid[row][col].isPath = false;\n                    initialGrid[row][col].isVisited = false;\n                }\n            }\n            setGrid([...initialGrid]);\n            setAlgorithm(\"Select Algorithm\");\n            showWeights();\n            setShortestPath(\"Shortest path has not been found yet.\");\n        }\n    };\n\n    const resetGrid = () => {\n        if (isAppRunning === false) {\n            resetSourceAndDestination();\n            for (let row = 0; row < totalRows; ++row) {\n                for (let col = 0; col < totalCols; ++col) {\n                    initialGrid[row][col].isPath = false;\n                    initialGrid[row][col].isWall = false;\n                    initialGrid[row][col].isVisited = false;\n                    initialGrid[row][col].isSource =\n                        row === sourceRow && col === sourceCol;\n                    initialGrid[row][col].isDestination =\n                        row === destinationRow && col === destinationCol;\n                }\n            }\n            setGrid([...initialGrid]);\n            setAlgorithm(\"Select Algorithm\");\n            showWeights();\n            setShortestPath(\"Shortest path has not been found yet.\");\n        }\n    };\n\n    const reconfigureWeights = () => {\n        if (isAppRunning === false) {\n            for (let row = 0; row < totalRows; ++row) {\n                for (let col = 0; col < totalCols; ++col) {\n                    weight[row][col] = generateRandomNumber(10, 30);\n                    initialGrid[row][col].weight = weight[row][col];\n                    initialGrid[row][col].isVisited = false;\n                }\n            }\n            setGrid([...initialGrid]);\n            setAlgorithm(\"Select Algorithm\");\n            showWeights();\n            setShortestPath(\"Shortest path has not been found yet.\");\n        }\n    };\n\n    const getCurrentSource = () => {\n        for (let row = 0; row < totalRows; ++row) {\n            for (let col = 0; col < totalCols; ++col) {\n                if (initialGrid[row][col].isSource === true) {\n                    return initialGrid[row][col];\n                }\n            }\n        }\n        return initialGrid[sourceRow][sourceCol]; // Ideally would never reach here.\n    };\n\n    const getCurrentDestination = () => {\n        for (let row = 0; row < totalRows; ++row) {\n            for (let col = 0; col < totalCols; ++col) {\n                if (initialGrid[row][col].isDestination === true) {\n                    return initialGrid[row][col];\n                }\n            }\n        }\n        return initialGrid[destinationRow][destinationCol]; // Ideally would never reach here.\n    };\n\n    const nullifyWeights = () => {\n        let weights = document.getElementsByClassName(\"weight-value\");\n        for (let i = 0; i < weights.length; ++i) {\n            weights[i].className = \"not-selectable weight-value hidden\";\n        }\n        setGrid([...initialGrid]);\n    };\n\n    const showWeights = () => {\n        let weights = document.getElementsByClassName(\"weight-value\");\n        for (let i = 0; i < weights.length; ++i) {\n            weights[i].className = \"not-selectable weight-value\";\n        }\n        setGrid([...initialGrid]);\n    };\n\n    const animateNodes = (nodes, timer, nodeType, minPathLength) => {\n        setTimeout(() => {\n            if (nodeType === \"visited\") {\n                for (let i = 0; i < nodes.length; ++i) {\n                    nodes[i].isVisited = true;\n                }\n                setGrid([...initialGrid]);\n            } else {\n                for (let i = 0; i < nodes.length; ++i) {\n                    nodes[i].isPath = true;\n                }\n                setGrid([...initialGrid]);\n                if (minPathLength === Infinity) {\n                    setShortestPath(\"Destination is not reachable from source\");\n                } else {\n                    setShortestPath(\n                        `Shortest path length from source to destination is ${minPathLength}`\n                    );\n                }\n                setAppRunning(false);\n                setIsAlgorithm(false);\n                setAlgorithm(\"Select Algorithm\");\n            }\n        }, timer);\n    };\n\n    const visualize = () => {\n        if (isAppRunning === false) {\n            if (algorithm === \"Select Algorithm\") {\n                alert(\"Select Algorithm to visualize\");\n            } else {\n                setAppRunning(true);\n                let src = getCurrentSource();\n                let dst = getCurrentDestination();\n                if (algorithm === \"BFS (Breadth First Search)\") {\n                    let results = BFS(initialGrid, src, dst);\n                    let [minPathLength, visitedNodes, shortestPathNodes] =\n                        results;\n                    let timer = 500;\n                    for (let i = 0; i < visitedNodes.length; ++i) {\n                        animateNodes(\n                            visitedNodes[i],\n                            timer,\n                            \"visited\",\n                            minPathLength\n                        );\n                        timer += 500;\n                    }\n                    animateNodes(\n                        shortestPathNodes,\n                        timer,\n                        \"path\",\n                        minPathLength\n                    );\n                } else if (algorithm === \"Bellman Ford Algorithm\") {\n                    let results = BellmanFord(initialGrid, src, dst);\n                    let [minPathLength, visitedNodes, shortestPathNodes] =\n                        results;\n                    let timer = 500;\n                    for (let i = 0; i < visitedNodes.length; ++i) {\n                        animateNodes(\n                            visitedNodes[i],\n                            timer,\n                            \"visited\",\n                            minPathLength\n                        );\n                        timer += 500;\n                    }\n                    animateNodes(\n                        shortestPathNodes,\n                        timer,\n                        \"path\",\n                        minPathLength\n                    );\n                } else if (algorithm === \"Floyd Warshall Algorithm\") {\n                    let results = FloydWarshall(initialGrid, src, dst);\n                    let [minPathLength, visitedNodes, shortestPathNodes] =\n                        results;\n                    let timer = 500;\n                    animateNodes(\n                        shortestPathNodes,\n                        timer,\n                        \"path\",\n                        minPathLength\n                    );\n                } else {\n                    let results = Dijkstra(grid, src, dst);\n                    let [minPathLength, visitedNodes, shortestPathNodes] =\n                        results;\n                    console.log(shortestPathNodes);\n                    let timer = 200;\n                    for (let i = 0; i < visitedNodes.length; ++i) {\n                        animateNodes(\n                            visitedNodes[i],\n                            timer,\n                            \"visited\",\n                            minPathLength\n                        );\n                        timer += 50;\n                    }\n                    animateNodes(\n                        shortestPathNodes,\n                        timer,\n                        \"path\",\n                        minPathLength\n                    );\n                }\n            }\n        }\n    };\n\n    return (\n        <div className=\"board\">\n            {/* Navbar */}\n            <div className=\"complete-navbar\">\n                <div className=\"navbar justify-content-center app-header\">\n                    <p className=\"app-name\">Shortest Path Visualizer</p>\n                </div>\n\n                <div className=\"navbar justify-content-center\">\n                    <ul className=\"nav justify-content-center navbar-content\">\n                        <li\n                            className=\"dropdown nav-item\"\n                            data-bs-toggle=\"dropdown\"\n                        >\n                            <a\n                                className=\"nav-link dropdown-toggle not-selectable\"\n                                disabled={isAppRunning}\n                            >\n                                {algorithm}\n                            </a>\n                            <ul className=\"dropdown-menu dropdown-menu-light\">\n                                <li>\n                                    <a\n                                        className=\"dropdown-item\"\n                                        href=\"#\"\n                                        onClick={() => {\n                                            nullifyWeights();\n                                            setIsAlgorithm(true);\n                                            setAlgorithm(\n                                                \"BFS (Breadth First Search)\"\n                                            );\n                                        }}\n                                    >\n                                        BFS (Breadth First Search)\n                                    </a>\n                                </li>\n                                <li>\n                                    <a\n                                        className=\"dropdown-item\"\n                                        href=\"#\"\n                                        onClick={() => {\n                                            showWeights();\n                                            setIsAlgorithm(true);\n                                            setAlgorithm(\n                                                \"Dijkstra's Algorithm\"\n                                            );\n                                        }}\n                                    >\n                                        Dijkstra's Algorithm\n                                    </a>\n                                </li>\n                                <li>\n                                    <a\n                                        className=\"dropdown-item\"\n                                        href=\"#\"\n                                        onClick={() => {\n                                            showWeights();\n                                            setIsAlgorithm(true);\n                                            setAlgorithm(\n                                                \"Bellman Ford Algorithm\"\n                                            );\n                                        }}\n                                    >\n                                        Bellman Ford Algorithm\n                                    </a>\n                                </li>\n                                <li>\n                                    <a\n                                        className=\"dropdown-item\"\n                                        href=\"#\"\n                                        onClick={() => {\n                                            showWeights();\n                                            setIsAlgorithm(true);\n                                            setAlgorithm(\n                                                \"Floyd Warshall Algorithm\"\n                                            );\n                                        }}\n                                    >\n                                        Floyd Warshall Algorithm\n                                    </a>\n                                </li>\n                            </ul>\n                        </li>\n                        <li className=\"nav-item\">\n                            <button\n                                type=\"button\"\n                                className=\"btn grad-text v-btn\"\n                                onClick={visualize}\n                                disabled={isAppRunning || !isAlgorithm}\n                            >\n                                &nbsp; Visualize &nbsp;\n                            </button>\n                        </li>\n                        <li className=\"nav-item\">\n                            <button\n                                type=\"button\"\n                                className=\"btn grad-text\"\n                                onClick={clearWalls}\n                                disabled={isAppRunning}\n                            >\n                                &nbsp; Clear Walls &nbsp;\n                            </button>\n                        </li>\n                        <li className=\"nav-item\">\n                            <button\n                                type=\"button\"\n                                className=\"btn grad-text\"\n                                onClick={clearPath}\n                                disabled={isAppRunning}\n                            >\n                                &nbsp; Clear Path &nbsp;\n                            </button>\n                        </li>\n                        <li className=\"nav-item\">\n                            <button\n                                type=\"button\"\n                                className=\"btn grad-text\"\n                                onClick={resetGrid}\n                                disabled={isAppRunning}\n                            >\n                                &nbsp; Reset Grid &nbsp;\n                            </button>\n                        </li>\n                        <li className=\"nav-item\">\n                            <button\n                                type=\"button\"\n                                className=\"btn grad-text\"\n                                onClick={reconfigureWeights}\n                                disabled={isAppRunning}\n                            >\n                                &nbsp; Reconfigure Weights &nbsp;\n                            </button>\n                        </li>\n                        <li className=\"nav-item\">\n                            <button\n                                type=\"button\"\n                                className=\"btn grad-text\"\n                                disabled={isAppRunning}\n                            >\n                                &nbsp; Tutorial &nbsp;\n                            </button>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n\n            {/* Visualizer */}\n            <div className=\"full-grid\">\n                <div className=\"path-length not-selectable\">\n                    <p className=\"shortest-path-result\">{shortestPath}</p>\n                </div>\n                {initialGrid.map((row, rowIndex) => {\n                    return (\n                        <div key={rowIndex} className=\"rows\">\n                            {row.map((column, columnIndex) => {\n                                return (\n                                    <div\n                                        className={getNodeClass(column)}\n                                        id={`${rowIndex}-${columnIndex}`}\n                                        key={columnIndex}\n                                        onMouseUp={() => {\n                                            handleMouseUp();\n                                        }}\n                                        onMouseDown={() => {\n                                            handleMouseDown(column);\n                                        }}\n                                        onMouseEnter={() => {\n                                            handleMouseEnter(column);\n                                        }}\n                                    >\n                                        <p className=\"not-selectable weight-value\">\n                                            {column.weight}\n                                        </p>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default Grid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}