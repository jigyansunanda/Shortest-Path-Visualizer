{"ast":null,"code":"var _jsxFileName = \"/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/algorithms-info/info/DijkstraInfo.js\";\nimport Editor from \"@monaco-editor/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  readOnly: true,\n  minimap: {\n    enabled: false\n  },\n  automaticLayout: true,\n  scrollBeyondLastLine: false,\n  fontSize: \"13px\",\n  lineNumbers: \"off\",\n  glyphMargin: false,\n  folding: false,\n  lineDecorationsWidth: 5,\n  renderIndentGuides: false\n};\nconst Dijkstracode = ``;\nconst DijkstraInfo = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Dijkstra's Shortest-Path-First (SPF) algorithm is a greedy single-source-shortest-path algorithm, conceived by\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"links\",\n        href: \"https://en.wikipedia.org/wiki/Edsger_W._Dijkstra\",\n        children: \"Edsger. W Dijkstra\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), \" \", \"in 1956.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Idea behind the algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"We maintain a container of distance for all vertices initialized with values Infinite.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Distance of source vertex is 0.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"At each iteration, we pick a vertex and finalize it distance. Initially none of the vertices have their distance finalized.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"How do we pick the vertex ?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"We pick the vertex for which distance has not been finalized and has minimum distance. (greedy choice)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Then we go to all adjacent vertices of it, and check whether do we get a shorter path to those vertices, through current vertex, If yes, then we update it's distance.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n_c = DijkstraInfo;\nexport default DijkstraInfo;\nvar _c;\n$RefreshReg$(_c, \"DijkstraInfo\");","map":{"version":3,"names":["Editor","options","readOnly","minimap","enabled","automaticLayout","scrollBeyondLastLine","fontSize","lineNumbers","glyphMargin","folding","lineDecorationsWidth","renderIndentGuides","Dijkstracode","DijkstraInfo"],"sources":["/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/algorithms-info/info/DijkstraInfo.js"],"sourcesContent":["import Editor from \"@monaco-editor/react\";\n\nconst options = {\n    readOnly: true,\n    minimap: { enabled: false },\n    automaticLayout: true,\n    scrollBeyondLastLine: false,\n    fontSize: \"13px\",\n    lineNumbers: \"off\",\n    glyphMargin: false,\n    folding: false,\n    lineDecorationsWidth: 5,\n    renderIndentGuides: false,\n};\n\nconst Dijkstracode = ``;\n\nconst DijkstraInfo = () => {\n    return (\n        <div>\n            <p>\n                Dijkstra's Shortest-Path-First (SPF) algorithm is a greedy\n                single-source-shortest-path algorithm, conceived by{\" \"}\n                <a\n                    className=\"links\"\n                    href=\"https://en.wikipedia.org/wiki/Edsger_W._Dijkstra\"\n                >\n                    Edsger. W Dijkstra\n                </a>{\" \"}\n                in 1956.\n            </p>\n            <ul>\n                <li>\n                    <strong>Idea behind the algorithm</strong>\n                    <ul>\n                        <li>\n                            We maintain a container of distance for all vertices\n                            initialized with values Infinite.\n                        </li>\n                        <li>Distance of source vertex is 0.</li>\n                        <li>\n                            At each iteration, we pick a vertex and finalize it\n                            distance. Initially none of the vertices have their\n                            distance finalized.\n                        </li>\n                        <li>\n                            <strong>How do we pick the vertex ?</strong>\n                            <ul>\n                                <li>\n                                    We pick the vertex for which distance has\n                                    not been finalized and has minimum distance.\n                                    (greedy choice)\n                                </li>\n                            </ul>\n                        </li>\n                        <li>\n                            Then we go to all adjacent vertices of it, and check\n                            whether do we get a shorter path to those vertices,\n                            through current vertex, If yes, then we update it's\n                            distance.\n                        </li>\n                    </ul>\n                </li>\n            </ul>\n        </div>\n    );\n};\n\nexport default DijkstraInfo;\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,sBAAsB;AAAC;AAE1C,MAAMC,OAAO,GAAG;EACZC,QAAQ,EAAE,IAAI;EACdC,OAAO,EAAE;IAAEC,OAAO,EAAE;EAAM,CAAC;EAC3BC,eAAe,EAAE,IAAI;EACrBC,oBAAoB,EAAE,KAAK;EAC3BC,QAAQ,EAAE,MAAM;EAChBC,WAAW,EAAE,KAAK;EAClBC,WAAW,EAAE,KAAK;EAClBC,OAAO,EAAE,KAAK;EACdC,oBAAoB,EAAE,CAAC;EACvBC,kBAAkB,EAAE;AACxB,CAAC;AAED,MAAMC,YAAY,GAAI,EAAC;AAEvB,MAAMC,YAAY,GAAG,MAAM;EACvB,oBACI;IAAA,wBACI;MAAA,6HAEwD,GAAG,eACvD;QACI,SAAS,EAAC,OAAO;QACjB,IAAI,EAAC,kDAAkD;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAGvD,EAAC,GAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QAER,eACJ;MAAA,uBACI;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAA0C,eAC1C;UAAA,wBACI;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAGK,eACL;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAwC,eACxC;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAIK,eACL;YAAA,wBACI;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QAA4C,eAC5C;cAAA,uBACI;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAIK;cAAA;cAAA;cAAA;YAAA,QACJ;UAAA;YAAA;YAAA;YAAA;UAAA,QACJ,eACL;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAKK;QAAA;UAAA;UAAA;UAAA;QAAA,QACJ;MAAA;QAAA;QAAA;QAAA;MAAA;IACJ;MAAA;MAAA;MAAA;IAAA,QACJ;EAAA;IAAA;IAAA;IAAA;EAAA,QACH;AAEd,CAAC;AAAC,KAjDIA,YAAY;AAmDlB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}