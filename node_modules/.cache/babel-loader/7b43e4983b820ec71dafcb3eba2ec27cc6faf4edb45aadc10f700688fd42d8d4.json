{"ast":null,"code":"var _jsxFileName = \"/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/algorithms-info/info/FloydWarshallInfo.js\";\nimport Editor from \"@monaco-editor/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  readOnly: true,\n  minimap: {\n    enabled: false\n  },\n  automaticLayout: true,\n  scrollBeyondLastLine: false,\n  fontSize: \"13px\",\n  lineNumbers: \"off\",\n  glyphMargin: false,\n  folding: false,\n  lineDecorationsWidth: 5,\n  renderIndentGuides: false\n};\nconst FloydWarshallcode = ``;\nconst FloydWarshallInfo = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Floyd Warshall All Pair Shortest Path (APSP) algorithm is a dynamic programming based algorithm, that computes shortest distances between all possible pair(source, destination) of vertices. This algorithm is relatively slower than even Bellman Ford algorithm. For slightly higher number of vertices this algorithm takes quite some time to compute all pair shortest paths.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The crucial advantage of this algorithm is that, after computation, it gives shortest paths among all possible pairs of source and destination vertex, \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"iff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 48\n      }, this), \" path exists.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Idea behind the algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"For each vertex, we update all shortest path from any source to any destination vertex, that contains this vertex as an intermediate vertx.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"For all pairs of source to destination, we check whether through this intermediate vertex, a shorter path is possible or not.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n_c = FloydWarshallInfo;\nexport default FloydWarshallInfo;\nvar _c;\n$RefreshReg$(_c, \"FloydWarshallInfo\");","map":{"version":3,"names":["Editor","options","readOnly","minimap","enabled","automaticLayout","scrollBeyondLastLine","fontSize","lineNumbers","glyphMargin","folding","lineDecorationsWidth","renderIndentGuides","FloydWarshallcode","FloydWarshallInfo"],"sources":["/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/algorithms-info/info/FloydWarshallInfo.js"],"sourcesContent":["import Editor from \"@monaco-editor/react\";\n\nconst options = {\n    readOnly: true,\n    minimap: { enabled: false },\n    automaticLayout: true,\n    scrollBeyondLastLine: false,\n    fontSize: \"13px\",\n    lineNumbers: \"off\",\n    glyphMargin: false,\n    folding: false,\n    lineDecorationsWidth: 5,\n    renderIndentGuides: false,\n};\n\nconst FloydWarshallcode = ``;\n\nconst FloydWarshallInfo = () => {\n    return (\n        <div>\n            <p>\n                Floyd Warshall All Pair Shortest Path (APSP) algorithm is a\n                dynamic programming based algorithm, that computes shortest\n                distances between all possible pair(source, destination) of\n                vertices. This algorithm is relatively slower than even Bellman\n                Ford algorithm. For slightly higher number of vertices this\n                algorithm takes quite some time to compute all pair shortest\n                paths.\n            </p>\n            <p>\n                The crucial advantage of this algorithm is that, after\n                computation, it gives shortest paths among all possible pairs of\n                source and destination vertex, <strong>iff</strong> path exists.\n            </p>\n            <ul>\n                <li>\n                    <strong>Idea behind the algorithm</strong>\n                    <ul>\n                        <li>\n                            For each vertex, we update all shortest path from\n                            any source to any destination vertex, that contains\n                            this vertex as an intermediate vertx.\n                        </li>\n                        <li>\n                            For all pairs of source to destination, we check\n                            whether through this intermediate vertex, a shorter\n                            path is possible or not.\n                        </li>\n                    </ul>\n                </li>\n            </ul>\n        </div>\n    );\n};\n\nexport default FloydWarshallInfo;\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,sBAAsB;AAAC;AAE1C,MAAMC,OAAO,GAAG;EACZC,QAAQ,EAAE,IAAI;EACdC,OAAO,EAAE;IAAEC,OAAO,EAAE;EAAM,CAAC;EAC3BC,eAAe,EAAE,IAAI;EACrBC,oBAAoB,EAAE,KAAK;EAC3BC,QAAQ,EAAE,MAAM;EAChBC,WAAW,EAAE,KAAK;EAClBC,WAAW,EAAE,KAAK;EAClBC,OAAO,EAAE,KAAK;EACdC,oBAAoB,EAAE,CAAC;EACvBC,kBAAkB,EAAE;AACxB,CAAC;AAED,MAAMC,iBAAiB,GAAI,EAAC;AAE5B,MAAMC,iBAAiB,GAAG,MAAM;EAC5B,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAQI,eACJ;MAAA,mLAGmC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAoB;IAAA;MAAA;MAAA;MAAA;IAAA,QACnD,eACJ;MAAA,uBACI;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAA0C,eAC1C;UAAA,wBACI;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAIK,eACL;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAIK;QAAA;UAAA;UAAA;UAAA;QAAA,QACJ;MAAA;QAAA;QAAA;QAAA;MAAA;IACJ;MAAA;MAAA;MAAA;IAAA,QACJ;EAAA;IAAA;IAAA;IAAA;EAAA,QACH;AAEd,CAAC;AAAC,KApCIA,iBAAiB;AAsCvB,eAAeA,iBAAiB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}