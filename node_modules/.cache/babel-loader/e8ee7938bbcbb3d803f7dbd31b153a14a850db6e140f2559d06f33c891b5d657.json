{"ast":null,"code":"var _jsxFileName = \"/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/algorithms-info/AlgoInfo.js\";\nimport Tab from \"react-bootstrap/Tab\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlgoInfo = () => {\n  return /*#__PURE__*/_jsxDEV(Tabs, {\n    defaultActiveKey: \"BFS\",\n    id: \"fill-tab-example\",\n    className: \"mb-3\",\n    fill: true,\n    children: /*#__PURE__*/_jsxDEV(Tab, {\n      eventKey: \"BFS\",\n      title: \"BFS (Breadth First Search)\",\n      children: /*#__PURE__*/_jsxDEV(\"di\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Breadth First Search is a Single-Source-Shortest-Path (SSSP) graph traversal algorithm\", \" \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"for unweighted graph\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 25\n          }, this), \", in which we visit the source vertex first and mark it as visited. Then we visit all \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"adjacent, not-visited\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 35\n          }, this), \" vertices of the source vertex, mark them visited and then we visit adjacent, not-visited vertices of these vertices and so on..\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Also, BFS with simple modification\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            className: \"links\",\n            href: \"https://cp-algorithms.com/graph/01_bfs.html\",\n            children: \"(0-1 BFS)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 25\n          }, this), \" \", \"can give shortest path from source to destination for\", \" \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"binary weighted\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 25\n          }, this), \" graph.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Idea behind the algorithm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: /*#__PURE__*/_jsxDEV(\"li\", {\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Since during breadth first search, total encounterd distance keeps increasing by 1, \", /*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \"i.e.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 43,\n                    columnNumber: 44\n                  }, this), \" we first travel source vertex (at distance 0), then travel vertices, those are at distance 1 from source, then vertices at distance 2 from source and so on, hence, the first time we encounter a vertex, the distance covered till now, must be the shortest distance.\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 40,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n};\n_c = AlgoInfo;\nexport default AlgoInfo;\nvar _c;\n$RefreshReg$(_c, \"AlgoInfo\");","map":{"version":3,"names":["Tab","Tabs","AlgoInfo"],"sources":["/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/algorithms-info/AlgoInfo.js"],"sourcesContent":["import Tab from \"react-bootstrap/Tab\";\nimport Tabs from \"react-bootstrap/Tabs\";\n\nconst AlgoInfo = () => {\n    return (\n        <Tabs\n            defaultActiveKey=\"BFS\"\n            id=\"fill-tab-example\"\n            className=\"mb-3\"\n            fill\n        >\n            <Tab eventKey=\"BFS\" title=\"BFS (Breadth First Search)\">\n                <di>\n                    <p>\n                        Breadth First Search is a Single-Source-Shortest-Path\n                        (SSSP) graph traversal algorithm{\" \"}\n                        <b>for unweighted graph</b>, in which we visit the\n                        source vertex first and mark it as visited. Then we\n                        visit all <b>adjacent, not-visited</b> vertices of the\n                        source vertex, mark them visited and then we visit\n                        adjacent, not-visited vertices of these vertices and so\n                        on..\n                    </p>\n                    <p>\n                        Also, BFS with simple modification{\" \"}\n                        <a\n                            className=\"links\"\n                            href=\"https://cp-algorithms.com/graph/01_bfs.html\"\n                        >\n                            (0-1 BFS)\n                        </a>{\" \"}\n                        can give shortest path from source to destination for{\" \"}\n                        <b>binary weighted</b> graph.\n                    </p>\n                    <ul>\n                        <li>\n                            <b>Idea behind the algorithm</b>\n                            <ul>\n                                <li>\n                                    <p>\n                                        Since during breadth first search, total\n                                        encounterd distance keeps increasing by\n                                        1, <b>i.e.</b> we first travel source\n                                        vertex (at distance 0), then travel\n                                        vertices, those are at distance 1 from\n                                        source, then vertices at distance 2 from\n                                        source and so on, hence, the first time\n                                        we encounter a vertex, the distance\n                                        covered till now, must be the shortest\n                                        distance.\n                                    </p>\n                                </li>\n                            </ul>\n                        </li>\n                    </ul>\n                </di>\n            </Tab>\n            {/* <Tab eventKey=\"profile\" title=\"Profile\">\n            <Sonnet />\n          </Tab>\n          <Tab eventKey=\"longer-tab\" title=\"Loooonger Tab\">\n            <Sonnet />\n          </Tab>\n          <Tab eventKey=\"contact\" title=\"Contact\" disabled>\n            <Sonnet />\n          </Tab> */}\n        </Tabs>\n    );\n};\n\nexport default AlgoInfo;\n"],"mappings":";AAAA,OAAOA,GAAG,MAAM,qBAAqB;AACrC,OAAOC,IAAI,MAAM,sBAAsB;AAAC;AAExC,MAAMC,QAAQ,GAAG,MAAM;EACnB,oBACI,QAAC,IAAI;IACD,gBAAgB,EAAC,KAAK;IACtB,EAAE,EAAC,kBAAkB;IACrB,SAAS,EAAC,MAAM;IAChB,IAAI;IAAA,uBAEJ,QAAC,GAAG;MAAC,QAAQ,EAAC,KAAK;MAAC,KAAK,EAAC,4BAA4B;MAAA,uBAClD;QAAA,wBACI;UAAA,qGAEqC,GAAG,eACpC;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAA2B,yGAEjB;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAA4B;QAAA;UAAA;UAAA;UAAA;QAAA,QAItC,eACJ;UAAA,iDACuC,GAAG,eACtC;YACI,SAAS,EAAC,OAAO;YACjB,IAAI,EAAC,6CAA6C;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAGlD,EAAC,GAAG,2DAC8C,GAAG,eACzD;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAsB;QAAA;UAAA;UAAA;UAAA;QAAA,QACtB,eACJ;UAAA,uBACI;YAAA,wBACI;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QAAgC,eAChC;cAAA,uBACI;gBAAA,uBACI;kBAAA,gHAGO;oBAAA;kBAAA;oBAAA;oBAAA;oBAAA;kBAAA,QAAW;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA;cAQd;gBAAA;gBAAA;gBAAA;cAAA;YACH;cAAA;cAAA;cAAA;YAAA,QACJ;UAAA;YAAA;YAAA;YAAA;UAAA;QACJ;UAAA;UAAA;UAAA;QAAA,QACJ;MAAA;QAAA;QAAA;QAAA;MAAA;IACJ;MAAA;MAAA;MAAA;IAAA;EACH;IAAA;IAAA;IAAA;EAAA,QAUH;AAEf,CAAC;AAAC,KAjEIA,QAAQ;AAmEd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}