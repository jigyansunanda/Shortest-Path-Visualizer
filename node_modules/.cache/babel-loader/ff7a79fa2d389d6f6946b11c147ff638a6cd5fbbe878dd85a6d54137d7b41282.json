{"ast":null,"code":"var _jsxFileName = \"/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/algorithms-info/info/BFSInfo.js\";\nimport Editor from \"@monaco-editor/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  readOnly: true,\n  minimap: {\n    enabled: false\n  }\n};\nconst BFScode = `function BFS(Graph[V], source, destination) {\n    1. initialize distance[V] = {Infinity, Infinity, Infinity, Infinity,.......}\n    2. distance[source] = 0\n    3. create an empty Queue (say 'q')\n    4. add source vertex to q\n    5. while (q is not empty) \n            vertex u := q.dequeue() {\n            for (all vertices v: adjacent of u) {\n                if (distance[v] == INF) {             // if vertex is not visited\n                    istance[v] = distance[u] + 1\n\t\t\t\t}\n            }\n        }\n    6. return distance[destination]\n}`;\nconst BFSInfo = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Breadth First Search is a Single-Source-Shortest-Path (SSSP) graph traversal algorithm \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"for unweighted graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 43\n      }, this), \", in which we visit the source vertex first and mark it as visited. Then we visit all \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"adjacent, not-visited\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 27\n      }, this), \" vertices of the source vertex, mark them visited and then we visit adjacent, not-visited vertices of these vertices and so on..\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Also, BFS with simple modification\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"links\",\n        href: \"https://cp-algorithms.com/graph/01_bfs.html\",\n        children: \"(0-1 BFS)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), \" \", \"can give shortest path from source to destination for\", \" \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"binary weighted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), \" graph.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Idea behind the algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Since during breadth first search, total encounterd distance keeps increasing by 1,\", \" \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"i.e.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 33\n              }, this), \" we first travel source vertex (at distance 0), then travel vertices, those are at distance 1 from source, then vertices at distance 2 from source and so on, hence, the first time we encounter a vertex, the distance covered till now, must be the shortest distance.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Editor, {\n      width: \"100%\",\n      height: \"30vh\",\n      theme: \"vs-dark\",\n      defaultLanguage: \"javascript\",\n      defaultValue: BFScode,\n      value: BFScode,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_c = BFSInfo;\nexport default BFSInfo;\nvar _c;\n$RefreshReg$(_c, \"BFSInfo\");","map":{"version":3,"names":["Editor","options","readOnly","minimap","enabled","BFScode","BFSInfo"],"sources":["/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/algorithms-info/info/BFSInfo.js"],"sourcesContent":["import Editor from \"@monaco-editor/react\";\n\nconst options = {\n    readOnly: true,\n    minimap: { enabled: false },\n};\n\nconst BFScode = `function BFS(Graph[V], source, destination) {\n    1. initialize distance[V] = {Infinity, Infinity, Infinity, Infinity,.......}\n    2. distance[source] = 0\n    3. create an empty Queue (say 'q')\n    4. add source vertex to q\n    5. while (q is not empty) \n            vertex u := q.dequeue() {\n            for (all vertices v: adjacent of u) {\n                if (distance[v] == INF) {             // if vertex is not visited\n                    istance[v] = distance[u] + 1\n\t\t\t\t}\n            }\n        }\n    6. return distance[destination]\n}`;\n\nconst BFSInfo = () => {\n    return (\n        <div>\n            <p>\n                Breadth First Search is a Single-Source-Shortest-Path (SSSP)\n                graph traversal algorithm <b>for unweighted graph</b>, in which\n                we visit the source vertex first and mark it as visited. Then we\n                visit all <b>adjacent, not-visited</b> vertices of the source\n                vertex, mark them visited and then we visit adjacent,\n                not-visited vertices of these vertices and so on..\n            </p>\n            <p>\n                Also, BFS with simple modification{\" \"}\n                <a\n                    className=\"links\"\n                    href=\"https://cp-algorithms.com/graph/01_bfs.html\"\n                >\n                    (0-1 BFS)\n                </a>{\" \"}\n                can give shortest path from source to destination for{\" \"}\n                <b>binary weighted</b> graph.\n            </p>\n            <ul>\n                <li>\n                    <b>Idea behind the algorithm</b>\n                    <ul>\n                        <li>\n                            <p>\n                                Since during breadth first search, total\n                                encounterd distance keeps increasing by 1,{\" \"}\n                                <b>i.e.</b> we first travel source vertex (at\n                                distance 0), then travel vertices, those are at\n                                distance 1 from source, then vertices at\n                                distance 2 from source and so on, hence, the\n                                first time we encounter a vertex, the distance\n                                covered till now, must be the shortest distance.\n                            </p>\n                        </li>\n                    </ul>\n                </li>\n            </ul>\n            <Editor\n                width=\"100%\"\n                height=\"30vh\"\n                theme=\"vs-dark\"\n                defaultLanguage=\"javascript\"\n                defaultValue={BFScode}\n                value={BFScode}\n                options={options}\n            />\n        </div>\n    );\n};\n\nexport default BFSInfo;\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,sBAAsB;AAAC;AAE1C,MAAMC,OAAO,GAAG;EACZC,QAAQ,EAAE,IAAI;EACdC,OAAO,EAAE;IAAEC,OAAO,EAAE;EAAM;AAC9B,CAAC;AAED,MAAMC,OAAO,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AAEF,MAAMC,OAAO,GAAG,MAAM;EAClB,oBACI;IAAA,wBACI;MAAA,mHAE8B;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAA2B,yGAE3C;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAA4B;IAAA;MAAA;MAAA;MAAA;IAAA,QAGtC,eACJ;MAAA,iDACuC,GAAG,eACtC;QACI,SAAS,EAAC,OAAO;QACjB,IAAI,EAAC,6CAA6C;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAGlD,EAAC,GAAG,2DAC8C,GAAG,eACzD;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAsB;IAAA;MAAA;MAAA;MAAA;IAAA,QACtB,eACJ;MAAA,uBACI;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAgC,eAChC;UAAA,uBACI;YAAA,uBACI;cAAA,kGAE+C,GAAG,eAC9C;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAAW;YAAA;cAAA;cAAA;cAAA;YAAA;UAMX;YAAA;YAAA;YAAA;UAAA;QACH;UAAA;UAAA;UAAA;QAAA,QACJ;MAAA;QAAA;QAAA;QAAA;MAAA;IACJ;MAAA;MAAA;MAAA;IAAA,QACJ,eACL,QAAC,MAAM;MACH,KAAK,EAAC,MAAM;MACZ,MAAM,EAAC,MAAM;MACb,KAAK,EAAC,SAAS;MACf,eAAe,EAAC,YAAY;MAC5B,YAAY,EAAED,OAAQ;MACtB,KAAK,EAAEA,OAAQ;MACf,OAAO,EAAEJ;IAAQ;MAAA;MAAA;MAAA;IAAA,QACnB;EAAA;IAAA;IAAA;IAAA;EAAA,QACA;AAEd,CAAC;AAAC,KApDIK,OAAO;AAsDb,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}