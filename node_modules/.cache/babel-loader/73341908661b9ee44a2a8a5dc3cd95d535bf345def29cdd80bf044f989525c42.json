{"ast":null,"code":"var _jsxFileName = \"/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/algorithms-info/info/BellmanFordInfo.js\";\nimport Editor from \"@monaco-editor/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  readOnly: true,\n  minimap: {\n    enabled: false\n  },\n  automaticLayout: true,\n  scrollBeyondLastLine: false,\n  fontSize: \"13px\",\n  lineNumbers: \"off\",\n  glyphMargin: false,\n  folding: false,\n  lineDecorationsWidth: 5,\n  renderIndentGuides: false\n};\nconst BellmanFordInfo = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Bellman Ford shortest path algorithm is a dynamic programming based algorithm that computes from source node all reachable nodes. This algorithm was proposed by Alfonso Shimbel and was named after it's publishers Richard Bellman and Lester Ford Jr. .Even though this algorithm is relatively\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"slower than Dijkstra's algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), \", it has one major advantage that, it\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"can detect negative weighted edge cycles\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Idea behind the algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"The key idea of the algorithm is\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"If there are V vertices in a graph (that does not contain negative weighted edge cycles), then any existing shortest path, between any source and destination vertex can not have length more than V-1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 29\n            }, this), \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"We first find out the shortest path containing 1 edge, then shortest path containing 2 edges, then 3 edges and so on..\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n_c = BellmanFordInfo;\nexport default BellmanFordInfo;\nvar _c;\n$RefreshReg$(_c, \"BellmanFordInfo\");","map":{"version":3,"names":["Editor","options","readOnly","minimap","enabled","automaticLayout","scrollBeyondLastLine","fontSize","lineNumbers","glyphMargin","folding","lineDecorationsWidth","renderIndentGuides","BellmanFordInfo"],"sources":["/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/algorithms-info/info/BellmanFordInfo.js"],"sourcesContent":["import Editor from \"@monaco-editor/react\";\n\nconst options = {\n    readOnly: true,\n    minimap: { enabled: false },\n    automaticLayout: true,\n    scrollBeyondLastLine: false,\n    fontSize: \"13px\",\n    lineNumbers: \"off\",\n    glyphMargin: false,\n    folding: false,\n    lineDecorationsWidth: 5,\n    renderIndentGuides: false,\n};\n\nconst BellmanFordInfo = () => {\n    return (\n        <div>\n            <p>\n                Bellman Ford shortest path algorithm is a dynamic programming\n                based algorithm that computes from source node all reachable\n                nodes. This algorithm was proposed by Alfonso Shimbel and was\n                named after it's publishers Richard Bellman and Lester Ford Jr.\n                .Even though this algorithm is relatively{\" \"}\n                <strong>slower than Dijkstra's algorithm</strong>, it has one\n                major advantage that, it{\" \"}\n                <strong>can detect negative weighted edge cycles</strong>.\n            </p>\n            <ul>\n                <li>\n                    <strong>Idea behind the algorithm</strong>\n                    <ul>\n                        <li>\n                            The key idea of the algorithm is{\" \"}\n                            <strong>\n                                If there are V vertices in a graph (that does\n                                not contain negative weighted edge cycles), then\n                                any existing shortest path, between any source\n                                and destination vertex can not have length more\n                                than V-1\n                            </strong>\n                            .\n                        </li>\n                        <li>\n                            We first find out the shortest path containing 1\n                            edge, then shortest path containing 2 edges, then 3\n                            edges and so on..\n                        </li>\n                    </ul>\n                </li>\n            </ul>\n        </div>\n    );\n};\n\nexport default BellmanFordInfo;\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,sBAAsB;AAAC;AAE1C,MAAMC,OAAO,GAAG;EACZC,QAAQ,EAAE,IAAI;EACdC,OAAO,EAAE;IAAEC,OAAO,EAAE;EAAM,CAAC;EAC3BC,eAAe,EAAE,IAAI;EACrBC,oBAAoB,EAAE,KAAK;EAC3BC,QAAQ,EAAE,MAAM;EAChBC,WAAW,EAAE,KAAK;EAClBC,WAAW,EAAE,KAAK;EAClBC,OAAO,EAAE,KAAK;EACdC,oBAAoB,EAAE,CAAC;EACvBC,kBAAkB,EAAE;AACxB,CAAC;AAED,MAAMC,eAAe,GAAG,MAAM;EAC1B,oBACI;IAAA,wBACI;MAAA,iTAK8C,GAAG,eAC7C;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAiD,2CACxB,GAAG,eAC5B;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAyD;IAAA;MAAA;MAAA;MAAA;IAAA,QACzD,eACJ;MAAA,uBACI;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAA0C,eAC1C;UAAA,wBACI;YAAA,+CACqC,GAAG,eACpC;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QAMS;UAAA;YAAA;YAAA;YAAA;UAAA,QAER,eACL;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAIK;QAAA;UAAA;UAAA;UAAA;QAAA,QACJ;MAAA;QAAA;QAAA;QAAA;MAAA;IACJ;MAAA;MAAA;MAAA;IAAA,QACJ;EAAA;IAAA;IAAA;IAAA;EAAA,QACH;AAEd,CAAC;AAAC,KAtCIA,eAAe;AAwCrB,eAAeA,eAAe;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}