{"ast":null,"code":"import Queue from\"../data-structures/Queue.js\";var totalRows=20,totalCols=30;var dx=[0,1,0,-1];var dy=[1,0,-1,0];var isValid=function isValid(r,c){return r>=0&&c>=0&&r<totalRows&&c<totalCols;};var BFS=function BFS(grid,src,dst){var distance=[];var parentNodes=[];for(var row=0;row<totalRows;++row){var d=[];var p=[];for(var col=0;col<totalCols;++col){d.push(Infinity);p.push(null);}distance.push(d);parentNodes.push(p);}distance[src.row][src.col]=0;var q=new Queue();q.enqueue(src);var pathFound=false;var visitedNodes=[];while(q.empty()===false){var currSize=q.size();var newVisitedNodes=[];for(var z=0;z<currSize;++z){var curr=q.dequeue();if(curr.isDestination===true){pathFound=true;break;}for(var dir=0;dir<4;++dir){var r=curr.row+dx[dir];var c=curr.col+dy[dir];if(isValid(r,c)){var adj=grid[r][c];if(adj.isWall===false){if(distance[r][c]===Infinity){distance[r][c]=distance[curr.row][curr.col]+1;newVisitedNodes.push(adj);parentNodes[r][c]=curr;q.enqueue(adj);}}}}}if(pathFound===true)break;visitedNodes.push(newVisitedNodes);}var shortestPathNodes=[];if(pathFound===true){var end=parentNodes[dst.row][dst.col];while(end.isSource!==true){shortestPathNodes.push(end);end=parentNodes[end.row][end.col];}}return[distance[dst.row][dst.col],visitedNodes,shortestPathNodes];};export default BFS;","map":{"version":3,"names":["Queue","totalRows","totalCols","dx","dy","isValid","r","c","BFS","grid","src","dst","distance","parentNodes","row","d","p","col","push","Infinity","q","enqueue","pathFound","visitedNodes","empty","currSize","size","newVisitedNodes","z","curr","dequeue","isDestination","dir","adj","isWall","shortestPathNodes","end","isSource"],"sources":["/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/algorithms/BFS.js"],"sourcesContent":["import Queue from \"../data-structures/Queue.js\";\n\nconst [totalRows, totalCols] = [20, 30];\nconst dx = [0, 1, 0, -1];\nconst dy = [1, 0, -1, 0];\n\nconst isValid = (r, c) => {\n    return r >= 0 && c >= 0 && r < totalRows && c < totalCols;\n};\n\nconst BFS = (grid, src, dst) => {\n    let distance = [];\n    let parentNodes = [];\n    for (let row = 0; row < totalRows; ++row) {\n        let d = [];\n        let p = [];\n        for (let col = 0; col < totalCols; ++col) {\n            d.push(Infinity);\n            p.push(null);\n        }\n        distance.push(d);\n        parentNodes.push(p);\n    }\n    distance[src.row][src.col] = 0;\n    let q = new Queue();\n    q.enqueue(src);\n    let pathFound = false;\n    let visitedNodes = [];\n    while (q.empty() === false) {\n        let currSize = q.size();\n        let newVisitedNodes = [];\n        for (let z = 0; z < currSize; ++z) {\n            let curr = q.dequeue();\n            if (curr.isDestination === true) {\n                pathFound = true;\n                break;\n            }\n            for (let dir = 0; dir < 4; ++dir) {\n                let r = curr.row + dx[dir];\n                let c = curr.col + dy[dir];\n                if (isValid(r, c)) {\n                    let adj = grid[r][c];\n                    if (adj.isWall === false) {\n                        if (distance[r][c] === Infinity) {\n                            distance[r][c] = distance[curr.row][curr.col] + 1;\n                            newVisitedNodes.push(adj);\n                            parentNodes[r][c] = curr;\n                            q.enqueue(adj);\n                        }\n                    }\n                }\n            }\n        }\n        if (pathFound === true) break;\n        visitedNodes.push(newVisitedNodes);\n    }\n    let shortestPathNodes = [];\n    if (pathFound === true) {\n        let end = parentNodes[dst.row][dst.col];\n        while (end.isSource !== true) {\n            shortestPathNodes.push(end);\n            end = parentNodes[end.row][end.col];\n        }\n    }\n    return [distance[dst.row][dst.col], visitedNodes, shortestPathNodes];\n};\n\nexport default BFS;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}