{"ast":null,"code":"var _jsxFileName = \"/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/grid/Grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Grid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateRandomNumber = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nconst [totalRows, totalCols] = [20, 30];\nvar sourceRow = 10;\nvar sourceCol = 10;\nvar destinationRow = 10;\nvar destinationCol = 20;\nvar grid = [];\nvar weight = [];\nclass Node {\n  constructor(x, y) {\n    this.row = x;\n    this.col = y;\n    this.isWall = false;\n    this.isSource = x === sourceRow && y === sourceCol;\n    this.isDestination = x === destinationRow && y === destinationCol;\n    this.isPath = false;\n    this.weight = weight[x][y];\n  }\n}\nconst initializeWeights = () => {\n  weight = [];\n  for (let row = 0; row < totalRows; ++row) {\n    let weightOfColumns = [];\n    for (let col = 0; col < totalCols; ++col) {\n      let weight = generateRandomNumber(10, 30);\n      weightOfColumns.push(weight);\n    }\n    weight.push(weightOfColumns);\n  }\n};\ninitializeWeights();\nvar previousSource;\nvar previousDestination;\nconst createVertices = () => {\n  grid = [];\n  for (let row = 0; row < totalRows; ++row) {\n    let columns = [];\n    for (let col = 0; col < totalCols; ++col) {\n      columns.push(new Node(row, col));\n    }\n    grid.push(columns);\n  }\n  previousSource = grid[sourceRow][sourceCol];\n  previousDestination = grid[destinationRow][destinationCol];\n};\ncreateVertices();\nconst getNodeClass = node => {\n  let nodeType = \"node\";\n  if (node.isSource === true) {\n    nodeType += \" source-node\";\n  } else if (node.isDestination === true) {\n    nodeType += \" destination-node\";\n  } else if (node.isWall === true) {\n    nodeType += \" wall-node\";\n  } else if (node.isPath === true) {\n    nodeType += \" path-node\";\n  }\n  return nodeType;\n};\nconst Grid = () => {\n  _s();\n  const [initialGrid, setGrid] = useState(grid);\n  const [isMouseDown, setMouseDown] = useState(false);\n  const [isSourceSelected, setSourceSelected] = useState(false);\n  const [isDestinationSelected, setDestinationSelected] = useState(false);\n  const [algorithm, setAlgorithm] = useState(\"Select Algorithm\");\n  const [isAppRunning, setAppRunning] = useState(false);\n  const [shortestPath, setShortestPath] = useState(\"Shortest path has not been found yet.\");\n  const resetSourceAndDestination = () => {\n    [sourceRow, sourceCol, destinationRow, destinationCol] = [10, 10, 10, 20];\n    previousSource = initialGrid[sourceRow][sourceCol];\n    previousDestination = initialGrid[destinationRow][destinationCol];\n    setGrid([...initialGrid]);\n  };\n  const handleMouseUp = () => {\n    setMouseDown(false);\n    if (isSourceSelected) setSourceSelected(false);\n    if (isDestinationSelected) setDestinationSelected(false);\n  };\n  const handleMouseDown = node => {\n    if (node.isWall === false) {\n      setMouseDown(true);\n      if (node.isSource) setSourceSelected(true);\n      if (node.isDestination) setDestinationSelected(true);\n    }\n  };\n  const handleMouseEnter = node => {\n    if (isMouseDown) {\n      if (isSourceSelected) {\n        if (!node.isSource && !node.isDestination && !node.isWall) {\n          previousSource.isSource = false;\n          previousSource.isDestination = false;\n          previousSource.isWall = false;\n          node.isSource = true;\n          previousSource = node;\n        }\n      } else if (isDestinationSelected) {\n        if (!node.isSource && !node.isDestination && !node.isWall) {\n          previousDestination.isSource = false;\n          previousDestination.isDestination = false;\n          previousDestination.isWall = false;\n          node.isDestination = true;\n          previousDestination = node;\n        }\n      } else {\n        if (!node.isSource && !node.isDestination && !node.isWall) {\n          node.isWall = true;\n        }\n      }\n      setGrid([...initialGrid]);\n    }\n  };\n  const clearWalls = () => {\n    if (isAppRunning === false) {\n      for (let row = 0; row < totalRows; ++row) {\n        for (let col = 0; col < totalCols; ++col) {\n          initialGrid[row][col].isWall = false;\n        }\n      }\n      setGrid([...initialGrid]);\n    }\n  };\n  const clearPath = () => {\n    if (isAppRunning === false) {\n      for (let row = 0; row < totalRows; ++row) {\n        for (let col = 0; col < totalCols; ++col) {\n          initialGrid[row][col].isPath = false;\n        }\n      }\n      setGrid([...initialGrid]);\n    }\n  };\n  const resetGrid = () => {\n    if (isAppRunning === false) {\n      resetSourceAndDestination();\n      for (let row = 0; row < totalRows; ++row) {\n        for (let col = 0; col < totalCols; ++col) {\n          initialGrid[row][col].isPath = false;\n          initialGrid[row][col].isWall = false;\n          initialGrid[row][col].isSource = row === sourceRow && col === sourceCol;\n          initialGrid[row][col].isDestination = row === destinationRow && col === destinationCol;\n        }\n      }\n      setGrid([...initialGrid]);\n    }\n  };\n  const reconfigureWeights = () => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"complete-navbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar justify-content-center app-header\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"app-name\",\n          children: \"Shortest Path Visualizer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"nav justify-content-center navbar-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"dropdown nav-item\",\n            \"data-bs-toggle\": \"dropdown\",\n            children: [/*#__PURE__*/_jsxDEV(\"a\", {\n              className: \"nav-link dropdown-toggle not-selectable\",\n              disabled: isAppRunning,\n              children: algorithm\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"dropdown-menu dropdown-menu-light\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  className: \"dropdown-item\",\n                  href: \"#\",\n                  onClick: () => {\n                    setAlgorithm(\"BFS (Breadth First Search)\");\n                  },\n                  children: \"BFS (Breadth First Search)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  className: \"dropdown-item\",\n                  href: \"#\",\n                  onClick: () => {\n                    setAlgorithm(\"DFS (Depth First Search)\");\n                  },\n                  children: \"Dijkstra's Algorithm\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  className: \"dropdown-item\",\n                  href: \"#\",\n                  onClick: () => {\n                    setAlgorithm(\"Bellman Ford Algorithm\");\n                  },\n                  children: \"Bellman Ford Algorithm\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  className: \"dropdown-item\",\n                  href: \"#\",\n                  children: \"Floyd Warshall Algorithm\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 241,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn grad-text\",\n              disabled: isAppRunning,\n              children: \"\\xA0 Visualize \\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn grad-text\",\n              onClick: clearWalls,\n              disabled: isAppRunning,\n              children: \"\\xA0 Clear Walls \\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn grad-text\",\n              onClick: clearPath,\n              disabled: isAppRunning,\n              children: \"\\xA0 Clear Path \\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn grad-text\",\n              onClick: resetGrid,\n              disabled: isAppRunning,\n              children: \"\\xA0 Reset Grid \\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn grad-text\",\n              onClick: reconfigureWeights,\n              disabled: isAppRunning,\n              children: \"\\xA0 Reconfigure Weights \\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn grad-text\",\n              disabled: isAppRunning,\n              children: \"\\xA0 Tutorial \\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"full-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"path-length not-selectable\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"shortest-path-result\",\n          children: shortestPath\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 17\n      }, this), initialGrid.map((row, rowIndex) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rows\",\n          children: row.map((column, columnIndex) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: getNodeClass(column),\n              id: `${rowIndex}-${columnIndex}`,\n              onMouseUp: () => {\n                handleMouseUp();\n              },\n              onMouseDown: () => {\n                handleMouseDown(column);\n              },\n              onMouseEnter: () => {\n                handleMouseEnter(column);\n              },\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"not-selectable weight-value\",\n                children: column.weight\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 41\n              }, this)\n            }, columnIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 37\n            }, this);\n          })\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 9\n  }, this);\n};\n_s(Grid, \"1n3bSq4BGw0w6sElewV9F+kJXeE=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","generateRandomNumber","min","max","Math","ceil","floor","random","totalRows","totalCols","sourceRow","sourceCol","destinationRow","destinationCol","grid","weight","Node","constructor","x","y","row","col","isWall","isSource","isDestination","isPath","initializeWeights","weightOfColumns","push","previousSource","previousDestination","createVertices","columns","getNodeClass","node","nodeType","Grid","initialGrid","setGrid","isMouseDown","setMouseDown","isSourceSelected","setSourceSelected","isDestinationSelected","setDestinationSelected","algorithm","setAlgorithm","isAppRunning","setAppRunning","shortestPath","setShortestPath","resetSourceAndDestination","handleMouseUp","handleMouseDown","handleMouseEnter","clearWalls","clearPath","resetGrid","reconfigureWeights","map","rowIndex","column","columnIndex"],"sources":["/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/grid/Grid.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./Grid.css\";\n\nconst generateRandomNumber = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst [totalRows, totalCols] = [20, 30];\n\nvar sourceRow = 10;\nvar sourceCol = 10;\nvar destinationRow = 10;\nvar destinationCol = 20;\n\nvar grid = [];\nvar weight = [];\n\nclass Node {\n    constructor(x, y) {\n        this.row = x;\n        this.col = y;\n        this.isWall = false;\n        this.isSource = x === sourceRow && y === sourceCol;\n        this.isDestination = x === destinationRow && y === destinationCol;\n        this.isPath = false;\n        this.weight = weight[x][y];\n    }\n}\n\nconst initializeWeights = () => {\n    weight = [];\n    for (let row = 0; row < totalRows; ++row) {\n        let weightOfColumns = [];\n        for (let col = 0; col < totalCols; ++col) {\n            let weight = generateRandomNumber(10, 30);\n            weightOfColumns.push(weight);\n        }\n        weight.push(weightOfColumns);\n    }\n};\n\ninitializeWeights();\n\nvar previousSource;\nvar previousDestination;\n\nconst createVertices = () => {\n    grid = [];\n    for (let row = 0; row < totalRows; ++row) {\n        let columns = [];\n        for (let col = 0; col < totalCols; ++col) {\n            columns.push(new Node(row, col));\n        }\n        grid.push(columns);\n    }\n    previousSource = grid[sourceRow][sourceCol];\n    previousDestination = grid[destinationRow][destinationCol];\n};\n\ncreateVertices();\n\nconst getNodeClass = (node) => {\n    let nodeType = \"node\";\n    if (node.isSource === true) {\n        nodeType += \" source-node\";\n    } else if (node.isDestination === true) {\n        nodeType += \" destination-node\";\n    } else if (node.isWall === true) {\n        nodeType += \" wall-node\";\n    } else if (node.isPath === true) {\n        nodeType += \" path-node\";\n    }\n    return nodeType;\n};\n\nconst Grid = () => {\n    const [initialGrid, setGrid] = useState(grid);\n    const [isMouseDown, setMouseDown] = useState(false);\n    const [isSourceSelected, setSourceSelected] = useState(false);\n    const [isDestinationSelected, setDestinationSelected] = useState(false);\n    const [algorithm, setAlgorithm] = useState(\"Select Algorithm\");\n    const [isAppRunning, setAppRunning] = useState(false);\n    const [shortestPath, setShortestPath] = useState(\n        \"Shortest path has not been found yet.\"\n    );\n\n    const resetSourceAndDestination = () => {\n        [sourceRow, sourceCol, destinationRow, destinationCol] = [\n            10, 10, 10, 20,\n        ];\n        previousSource = initialGrid[sourceRow][sourceCol];\n        previousDestination = initialGrid[destinationRow][destinationCol];\n        setGrid([...initialGrid]);\n    };\n\n    const handleMouseUp = () => {\n        setMouseDown(false);\n        if (isSourceSelected) setSourceSelected(false);\n        if (isDestinationSelected) setDestinationSelected(false);\n    };\n\n    const handleMouseDown = (node) => {\n        if (node.isWall === false) {\n            setMouseDown(true);\n            if (node.isSource) setSourceSelected(true);\n            if (node.isDestination) setDestinationSelected(true);\n        }\n    };\n\n    const handleMouseEnter = (node) => {\n        if (isMouseDown) {\n            if (isSourceSelected) {\n                if (!node.isSource && !node.isDestination && !node.isWall) {\n                    previousSource.isSource = false;\n                    previousSource.isDestination = false;\n                    previousSource.isWall = false;\n                    node.isSource = true;\n                    previousSource = node;\n                }\n            } else if (isDestinationSelected) {\n                if (!node.isSource && !node.isDestination && !node.isWall) {\n                    previousDestination.isSource = false;\n                    previousDestination.isDestination = false;\n                    previousDestination.isWall = false;\n                    node.isDestination = true;\n                    previousDestination = node;\n                }\n            } else {\n                if (!node.isSource && !node.isDestination && !node.isWall) {\n                    node.isWall = true;\n                }\n            }\n            setGrid([...initialGrid]);\n        }\n    };\n\n    const clearWalls = () => {\n        if (isAppRunning === false) {\n            for (let row = 0; row < totalRows; ++row) {\n                for (let col = 0; col < totalCols; ++col) {\n                    initialGrid[row][col].isWall = false;\n                }\n            }\n            setGrid([...initialGrid]);\n        }\n    };\n\n    const clearPath = () => {\n        if (isAppRunning === false) {\n            for (let row = 0; row < totalRows; ++row) {\n                for (let col = 0; col < totalCols; ++col) {\n                    initialGrid[row][col].isPath = false;\n                }\n            }\n            setGrid([...initialGrid]);\n        }\n    };\n\n    const resetGrid = () => {\n        if (isAppRunning === false) {\n            resetSourceAndDestination();\n            for (let row = 0; row < totalRows; ++row) {\n                for (let col = 0; col < totalCols; ++col) {\n                    initialGrid[row][col].isPath = false;\n                    initialGrid[row][col].isWall = false;\n                    initialGrid[row][col].isSource =\n                        row === sourceRow && col === sourceCol;\n                    initialGrid[row][col].isDestination =\n                        row === destinationRow && col === destinationCol;\n                }\n            }\n            setGrid([...initialGrid]);\n        }\n    };\n\n    const reconfigureWeights = () => {};\n\n    return (\n        <div className=\"board\">\n            {/* Navbar */}\n            <div className=\"complete-navbar\">\n                <div className=\"navbar justify-content-center app-header\">\n                    <p className=\"app-name\">Shortest Path Visualizer</p>\n                </div>\n\n                <div className=\"navbar justify-content-center\">\n                    <ul className=\"nav justify-content-center navbar-content\">\n                        <li\n                            className=\"dropdown nav-item\"\n                            data-bs-toggle=\"dropdown\"\n                        >\n                            <a\n                                className=\"nav-link dropdown-toggle not-selectable\"\n                                disabled={isAppRunning}\n                            >\n                                {algorithm}\n                            </a>\n                            <ul className=\"dropdown-menu dropdown-menu-light\">\n                                <li>\n                                    <a\n                                        className=\"dropdown-item\"\n                                        href=\"#\"\n                                        onClick={() => {\n                                            setAlgorithm(\n                                                \"BFS (Breadth First Search)\"\n                                            );\n                                        }}\n                                    >\n                                        BFS (Breadth First Search)\n                                    </a>\n                                </li>\n                                <li>\n                                    <a\n                                        className=\"dropdown-item\"\n                                        href=\"#\"\n                                        onClick={() => {\n                                            setAlgorithm(\n                                                \"DFS (Depth First Search)\"\n                                            );\n                                        }}\n                                    >\n                                        Dijkstra's Algorithm\n                                    </a>\n                                </li>\n                                <li>\n                                    <a\n                                        className=\"dropdown-item\"\n                                        href=\"#\"\n                                        onClick={() => {\n                                            setAlgorithm(\n                                                \"Bellman Ford Algorithm\"\n                                            );\n                                        }}\n                                    >\n                                        Bellman Ford Algorithm\n                                    </a>\n                                </li>\n                                <li>\n                                    <a className=\"dropdown-item\" href=\"#\">\n                                        Floyd Warshall Algorithm\n                                    </a>\n                                </li>\n                            </ul>\n                        </li>\n                        <li className=\"nav-item\">\n                            <button\n                                type=\"button\"\n                                className=\"btn grad-text\"\n                                disabled={isAppRunning}\n                            >\n                                &nbsp; Visualize &nbsp;\n                            </button>\n                        </li>\n                        <li className=\"nav-item\">\n                            <button\n                                type=\"button\"\n                                className=\"btn grad-text\"\n                                onClick={clearWalls}\n                                disabled={isAppRunning}\n                            >\n                                &nbsp; Clear Walls &nbsp;\n                            </button>\n                        </li>\n                        <li className=\"nav-item\">\n                            <button\n                                type=\"button\"\n                                className=\"btn grad-text\"\n                                onClick={clearPath}\n                                disabled={isAppRunning}\n                            >\n                                &nbsp; Clear Path &nbsp;\n                            </button>\n                        </li>\n                        <li className=\"nav-item\">\n                            <button\n                                type=\"button\"\n                                className=\"btn grad-text\"\n                                onClick={resetGrid}\n                                disabled={isAppRunning}\n                            >\n                                &nbsp; Reset Grid &nbsp;\n                            </button>\n                        </li>\n                        <li className=\"nav-item\">\n                            <button\n                                type=\"button\"\n                                className=\"btn grad-text\"\n                                onClick={reconfigureWeights}\n                                disabled={isAppRunning}\n                            >\n                                &nbsp; Reconfigure Weights &nbsp;\n                            </button>\n                        </li>\n                        <li className=\"nav-item\">\n                            <button\n                                type=\"button\"\n                                className=\"btn grad-text\"\n                                disabled={isAppRunning}\n                            >\n                                &nbsp; Tutorial &nbsp;\n                            </button>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n\n            {/* <div className=\"symbols-bar\">\n                <ul>\n                    <li className=\"elements\">\n                        <div className=\"logo source-logo\"></div>\n                        Source Node\n                    </li>\n                    <li className=\"elements\">\n                        <div className=\"logo destination-logo\"></div>\n                        Destination Node\n                    </li>\n                    <li className=\"elements\">\n                        <div className=\"logo wall-logo\"></div>\n                        Walls &nbsp; &nbsp; &nbsp;\n                    </li>\n                </ul>\n            </div> */}\n\n            {/* Visualizer */}\n            <div className=\"full-grid\">\n                <div className=\"path-length not-selectable\">\n                    <p className=\"shortest-path-result\">{shortestPath}</p>\n                </div>\n                {initialGrid.map((row, rowIndex) => {\n                    return (\n                        <div key={rowIndex} className=\"rows\">\n                            {row.map((column, columnIndex) => {\n                                return (\n                                    <div\n                                        className={getNodeClass(column)}\n                                        id={`${rowIndex}-${columnIndex}`}\n                                        key={columnIndex}\n                                        onMouseUp={() => {\n                                            handleMouseUp();\n                                        }}\n                                        onMouseDown={() => {\n                                            handleMouseDown(column);\n                                        }}\n                                        onMouseEnter={() => {\n                                            handleMouseEnter(column);\n                                        }}\n                                    >\n                                        <p className=\"not-selectable weight-value\">\n                                            {column.weight}\n                                        </p>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default Grid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}