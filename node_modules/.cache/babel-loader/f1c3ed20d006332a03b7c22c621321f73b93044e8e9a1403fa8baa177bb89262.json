{"ast":null,"code":"const [totalRows, totalCols] = [20, 30];\nconst dx = [0, 1, 0, -1];\nconst dy = [1, 0, -1, 0];\nconst BellmanFord = (grid, src, dst) => {\n  let distance = [],\n    parentNodes = [],\n    w = [];\n  for (let row = 0; row < totalRows; ++row) {\n    let d = [],\n      p = [],\n      tmp = [];\n    for (let col = 0; col < totalCols; ++col) {\n      d.push(Infinity);\n      p.push(null);\n      tmp.push(grid[row][col].weight);\n    }\n    distance.push(d);\n    parentNodes.push(p);\n    w.push(tmp);\n  }\n  w[src.row][src.col] = w[dst.row][dst.col] = 0;\n  for (let count = 0; count < totalRows * totalCols; ++count) {\n    //\n  }\n};\n_c = BellmanFord;\nexport default BellmanFord;\nvar _c;\n$RefreshReg$(_c, \"BellmanFord\");","map":{"version":3,"names":["totalRows","totalCols","dx","dy","BellmanFord","grid","src","dst","distance","parentNodes","w","row","d","p","tmp","col","push","Infinity","weight","count"],"sources":["/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/algorithms/BellmanFord.js"],"sourcesContent":["const [totalRows, totalCols] = [20, 30];\nconst dx = [0, 1, 0, -1];\nconst dy = [1, 0, -1, 0];\n\nconst BellmanFord = (grid, src, dst) => {\n    let distance = [],\n        parentNodes = [],\n        w = [];\n    for (let row = 0; row < totalRows; ++row) {\n        let d = [],\n            p = [],\n            tmp = [];\n        for (let col = 0; col < totalCols; ++col) {\n            d.push(Infinity);\n            p.push(null);\n            tmp.push(grid[row][col].weight);\n        }\n        distance.push(d);\n        parentNodes.push(p);\n        w.push(tmp);\n    }\n    w[src.row][src.col] = w[dst.row][dst.col] = 0;\n\n    for (let count = 0; count < totalRows * totalCols; ++count) {\n        //\n    }\n};\n\nexport default BellmanFord;\n"],"mappings":"AAAA,MAAM,CAACA,SAAS,EAAEC,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;AACvC,MAAMC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACxB,MAAMC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AAExB,MAAMC,WAAW,GAAG,CAACC,IAAI,EAAEC,GAAG,EAAEC,GAAG,KAAK;EACpC,IAAIC,QAAQ,GAAG,EAAE;IACbC,WAAW,GAAG,EAAE;IAChBC,CAAC,GAAG,EAAE;EACV,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGX,SAAS,EAAE,EAAEW,GAAG,EAAE;IACtC,IAAIC,CAAC,GAAG,EAAE;MACNC,CAAC,GAAG,EAAE;MACNC,GAAG,GAAG,EAAE;IACZ,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGd,SAAS,EAAE,EAAEc,GAAG,EAAE;MACtCH,CAAC,CAACI,IAAI,CAACC,QAAQ,CAAC;MAChBJ,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC;MACZF,GAAG,CAACE,IAAI,CAACX,IAAI,CAACM,GAAG,CAAC,CAACI,GAAG,CAAC,CAACG,MAAM,CAAC;IACnC;IACAV,QAAQ,CAACQ,IAAI,CAACJ,CAAC,CAAC;IAChBH,WAAW,CAACO,IAAI,CAACH,CAAC,CAAC;IACnBH,CAAC,CAACM,IAAI,CAACF,GAAG,CAAC;EACf;EACAJ,CAAC,CAACJ,GAAG,CAACK,GAAG,CAAC,CAACL,GAAG,CAACS,GAAG,CAAC,GAAGL,CAAC,CAACH,GAAG,CAACI,GAAG,CAAC,CAACJ,GAAG,CAACQ,GAAG,CAAC,GAAG,CAAC;EAE7C,KAAK,IAAII,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGnB,SAAS,GAAGC,SAAS,EAAE,EAAEkB,KAAK,EAAE;IACxD;EAAA;AAER,CAAC;AAAC,KAtBIf,WAAW;AAwBjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}