{"ast":null,"code":"const [totalRows, totalCols] = [20, 30];\nconst dx = [0, 1, 0, -1];\nconst dy = [1, 0, -1, 0];\nconst isValid = (r, c) => {\n  return r >= 0 && c >= 0 && r < totalRows && c < totalCols;\n};\nconst BellmanFord = (grid, src, dst) => {\n  let distance = [];\n  let parentNodes = [];\n  let w = [];\n  for (let row = 0; row < totalRows; ++row) {\n    let d = [];\n    let p = [];\n    let tmp = [];\n    for (let col = 0; col < totalCols; ++col) {\n      d.push(Infinity);\n      p.push(null);\n      tmp.push(grid[row][col].weight);\n    }\n    distance.push(d);\n    parentNodes.push(p);\n    w.push(tmp);\n  }\n  w[src.row][src.col] = w[dst.row][dst.col] = 0;\n  distance[src.row][src.col] = 0;\n  let relaxedNodes = [];\n  for (let count = 0; count < totalRows * totalCols; ++count) {\n    let flag = false;\n    let relaxed = [];\n    for (let i = 0; i < totalRows; ++i) {\n      for (let j = 0; j < totalCols; ++j) {\n        let curr = grid[i][j];\n        let x = curr.row,\n          y = curr.col;\n        if (curr.isWall === false && distance[x][y] !== Infinity) {\n          for (let dir = 0; dir < 4; ++dir) {\n            let r = x + dx[dir];\n            let c = y + dy[dir];\n            if (isValid(r, c)) {\n              if (grid[r][c].isWall === false) {\n                if (distance[r][c] > distance[x][y] + w[r][c]) {\n                  distance[r][c] = distance[x][y] + w[r][c];\n                  flag = true;\n                  relaxed.push(grid[r][c]);\n                  parentNodes[r][c] = curr;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (flag === false) break;\n    relaxedNodes.push(relaxed);\n  }\n  let shortestPathNodes = [];\n  if (distance[dst.row][dst.col] !== Infinity) {\n    let end = parentNodes[dst.row][dst.col];\n    while (end.isSource !== true) {\n      shortestPathNodes.push(end);\n      end = parentNodes[end.row][end.col];\n    }\n  }\n  return [distance[dst.row][dst.col], relaxedNodes, shortestPathNodes];\n};\n_c = BellmanFord;\nexport default BellmanFord;\nvar _c;\n$RefreshReg$(_c, \"BellmanFord\");","map":{"version":3,"names":["totalRows","totalCols","dx","dy","isValid","r","c","BellmanFord","grid","src","dst","distance","parentNodes","w","row","d","p","tmp","col","push","Infinity","weight","relaxedNodes","count","flag","relaxed","i","j","curr","x","y","isWall","dir","shortestPathNodes","end","isSource"],"sources":["/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/algorithms/BellmanFord.js"],"sourcesContent":["const [totalRows, totalCols] = [20, 30];\nconst dx = [0, 1, 0, -1];\nconst dy = [1, 0, -1, 0];\n\nconst isValid = (r, c) => {\n    return r >= 0 && c >= 0 && r < totalRows && c < totalCols;\n};\n\nconst BellmanFord = (grid, src, dst) => {\n    let distance = [];\n    let parentNodes = [];\n    let w = [];\n    for (let row = 0; row < totalRows; ++row) {\n        let d = [];\n        let p = [];\n        let tmp = [];\n        for (let col = 0; col < totalCols; ++col) {\n            d.push(Infinity);\n            p.push(null);\n            tmp.push(grid[row][col].weight);\n        }\n        distance.push(d);\n        parentNodes.push(p);\n        w.push(tmp);\n    }\n    w[src.row][src.col] = w[dst.row][dst.col] = 0;\n    distance[src.row][src.col] = 0;\n    let relaxedNodes = [];\n    for (let count = 0; count < totalRows * totalCols; ++count) {\n        let flag = false;\n        let relaxed = [];\n        for (let i = 0; i < totalRows; ++i) {\n            for (let j = 0; j < totalCols; ++j) {\n                let curr = grid[i][j];\n                let x = curr.row,\n                    y = curr.col;\n                if (curr.isWall === false && distance[x][y] !== Infinity) {\n                    for (let dir = 0; dir < 4; ++dir) {\n                        let r = x + dx[dir];\n                        let c = y + dy[dir];\n                        if (isValid(r, c)) {\n                            if (grid[r][c].isWall === false) {\n                                if (distance[r][c] > distance[x][y] + w[r][c]) {\n                                    distance[r][c] = distance[x][y] + w[r][c];\n                                    flag = true;\n                                    relaxed.push(grid[r][c]);\n                                    parentNodes[r][c] = curr;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (flag === false) break;\n        relaxedNodes.push(relaxed);\n    }\n    let shortestPathNodes = [];\n    if (distance[dst.row][dst.col] !== Infinity) {\n        let end = parentNodes[dst.row][dst.col];\n        while (end.isSource !== true) {\n            shortestPathNodes.push(end);\n            end = parentNodes[end.row][end.col];\n        }\n    }\n    return [distance[dst.row][dst.col], relaxedNodes, shortestPathNodes];\n};\n\nexport default BellmanFord;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}