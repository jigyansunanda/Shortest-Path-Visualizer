{"ast":null,"code":"var _jsxFileName = \"/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/grid/Grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Grid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateRandomNumber = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nconst [totalRows, totalCols] = [20, 40];\nvar sourceRow = 10;\nvar sourceCol = 10;\nvar destinationRow = 10;\nvar destinationCol = 30;\nvar grid = [];\nvar weight = [];\nclass Vertex {\n  constructor(x, y) {\n    this.row = x;\n    this.col = y;\n    this.isWall = false;\n    this.isSource = x === sourceRow && y === sourceCol;\n    this.isDestination = x === destinationRow && y === destinationCol;\n    this.weight = weight[x][y];\n  }\n}\nconst initializeWeights = () => {\n  for (let row = 0; row < totalRows; ++row) {\n    let weightOfColumns = [];\n    for (let col = 0; col < totalCols; ++col) {\n      let weight = generateRandomNumber(10, 30);\n      weightOfColumns.push(weight);\n    }\n    weight.push(weightOfColumns);\n  }\n};\ninitializeWeights();\nconst createVertices = () => {\n  for (let row = 0; row < totalRows; ++row) {\n    let columns = [];\n    for (let col = 0; col < totalCols; ++col) {\n      columns.push(new Vertex(row, col));\n    }\n    grid.push(columns);\n  }\n};\ncreateVertices();\nconst getNodeClass = (isSource, isDestination, isWall) => {\n  let nodeType = \"node\";\n  if (isSource) {\n    nodeType += \" source-node\";\n  } else if (isDestination) {\n    nodeType += \" destination-node\";\n  } else if (isWall) {\n    nodeType += \" wall-node\";\n  }\n  return nodeType;\n};\nvar isMouseDown = false;\nvar isRunning = false;\nvar isSourceSelected = false;\nvar isDestinationSelected = false;\nconst handleMouseUp = column => {\n  // console.log(a + \" \" + b);\n  if (column.isSource === false && column.isDestination === false) {\n    isMouseDown = false;\n  }\n};\nconst Grid = () => {\n  _s();\n  const [initialGrid, setGrid] = useState(grid);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"full-grid\",\n      children: initialGrid.map((row, rowIndex) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: row.map((column, columnIndex) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: getNodeClass(column.isSource, column.isDestination, column.isWall),\n              id: `${rowIndex}-${columnIndex}`,\n              row: column.row,\n              col: column.col,\n              nodeType: getNodeClass(column.isSource, column.isDestination, column.isWall),\n              nodeWeight: column.weight,\n              isSource: column.isSource,\n              isDestination: column.isDestination,\n              isWall: column.isWall,\n              onMouseUp: () => {\n                // if (\n                //     column.isSource === false &&\n                //     column.isDestination === false\n                // ) {\n                //     isMouseDown = false;\n                // }\n                handleMouseUp(column.isSource, column.isDestination);\n              },\n              onMouseDown: () => {\n                if (column.isSource === false && column.isDestination === false) {\n                  isMouseDown = true;\n                }\n              },\n              onMouseEnter: () => {\n                if (isMouseDown) {\n                  if (column.isSource === false && column.isDestination === false) {\n                    if (column.isWall === false) {\n                      column.isWall = true;\n                      document.getElementById(`${rowIndex}-${columnIndex}`).className = \"node wall-node\";\n                      setGrid(initialGrid);\n                    } else {\n                      column.isWall = false;\n                      document.getElementById(`${rowIndex}-${columnIndex}`).className = \"node\";\n                      setGrid(initialGrid);\n                    }\n                  }\n                }\n              },\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"not-selectable\",\n                children: column.weight\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 41\n              }, this)\n            }, columnIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 37\n            }, this);\n          })\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shortest-path-result not-selectable\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Shortest path has not been found yet !!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n_s(Grid, \"kEP03Q2GsTUUgocC5qxJd1IxJQw=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","generateRandomNumber","min","max","Math","ceil","floor","random","totalRows","totalCols","sourceRow","sourceCol","destinationRow","destinationCol","grid","weight","Vertex","constructor","x","y","row","col","isWall","isSource","isDestination","initializeWeights","weightOfColumns","push","createVertices","columns","getNodeClass","nodeType","isMouseDown","isRunning","isSourceSelected","isDestinationSelected","handleMouseUp","column","Grid","initialGrid","setGrid","map","rowIndex","columnIndex","document","getElementById","className"],"sources":["/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/grid/Grid.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./Grid.css\";\n\nconst generateRandomNumber = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst [totalRows, totalCols] = [20, 40];\n\nvar sourceRow = 10;\nvar sourceCol = 10;\nvar destinationRow = 10;\nvar destinationCol = 30;\n\nvar grid = [];\nvar weight = [];\n\nclass Vertex {\n    constructor(x, y) {\n        this.row = x;\n        this.col = y;\n        this.isWall = false;\n        this.isSource = x === sourceRow && y === sourceCol;\n        this.isDestination = x === destinationRow && y === destinationCol;\n        this.weight = weight[x][y];\n    }\n}\n\nconst initializeWeights = () => {\n    for (let row = 0; row < totalRows; ++row) {\n        let weightOfColumns = [];\n        for (let col = 0; col < totalCols; ++col) {\n            let weight = generateRandomNumber(10, 30);\n            weightOfColumns.push(weight);\n        }\n        weight.push(weightOfColumns);\n    }\n};\n\ninitializeWeights();\n\nconst createVertices = () => {\n    for (let row = 0; row < totalRows; ++row) {\n        let columns = [];\n        for (let col = 0; col < totalCols; ++col) {\n            columns.push(new Vertex(row, col));\n        }\n        grid.push(columns);\n    }\n};\n\ncreateVertices();\n\nconst getNodeClass = (isSource, isDestination, isWall) => {\n    let nodeType = \"node\";\n    if (isSource) {\n        nodeType += \" source-node\";\n    } else if (isDestination) {\n        nodeType += \" destination-node\";\n    } else if (isWall) {\n        nodeType += \" wall-node\";\n    }\n    return nodeType;\n};\n\nvar isMouseDown = false;\nvar isRunning = false;\nvar isSourceSelected = false;\nvar isDestinationSelected = false;\n\nconst handleMouseUp = (column) => {\n    // console.log(a + \" \" + b);\n    if (column.isSource === false && column.isDestination === false) {\n        isMouseDown = false;\n    }\n};\n\nconst Grid = () => {\n    const [initialGrid, setGrid] = useState(grid);\n    return (\n        <div className=\"board\">\n            <div className=\"full-grid\">\n                {initialGrid.map((row, rowIndex) => {\n                    return (\n                        <div key={rowIndex} className=\"row\">\n                            {row.map((column, columnIndex) => {\n                                return (\n                                    <div\n                                        className={getNodeClass(\n                                            column.isSource,\n                                            column.isDestination,\n                                            column.isWall\n                                        )}\n                                        id={`${rowIndex}-${columnIndex}`}\n                                        key={columnIndex}\n                                        row={column.row}\n                                        col={column.col}\n                                        nodeType={getNodeClass(\n                                            column.isSource,\n                                            column.isDestination,\n                                            column.isWall\n                                        )}\n                                        nodeWeight={column.weight}\n                                        isSource={column.isSource}\n                                        isDestination={column.isDestination}\n                                        isWall={column.isWall}\n                                        onMouseUp={() => {\n                                            // if (\n                                            //     column.isSource === false &&\n                                            //     column.isDestination === false\n                                            // ) {\n                                            //     isMouseDown = false;\n                                            // }\n                                            handleMouseUp(\n                                                column.isSource,\n                                                column.isDestination\n                                            );\n                                        }}\n                                        onMouseDown={() => {\n                                            if (\n                                                column.isSource === false &&\n                                                column.isDestination === false\n                                            ) {\n                                                isMouseDown = true;\n                                            }\n                                        }}\n                                        onMouseEnter={() => {\n                                            if (isMouseDown) {\n                                                if (\n                                                    column.isSource === false &&\n                                                    column.isDestination ===\n                                                        false\n                                                ) {\n                                                    if (\n                                                        column.isWall === false\n                                                    ) {\n                                                        column.isWall = true;\n                                                        document.getElementById(\n                                                            `${rowIndex}-${columnIndex}`\n                                                        ).className =\n                                                            \"node wall-node\";\n                                                        setGrid(initialGrid);\n                                                    } else {\n                                                        column.isWall = false;\n                                                        document.getElementById(\n                                                            `${rowIndex}-${columnIndex}`\n                                                        ).className = \"node\";\n                                                        setGrid(initialGrid);\n                                                    }\n                                                }\n                                            }\n                                        }}\n                                    >\n                                        <p className=\"not-selectable\">\n                                            {column.weight}\n                                        </p>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    );\n                })}\n            </div>\n            <div className=\"shortest-path-result not-selectable\">\n                <p>Shortest path has not been found yet !!!</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Grid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}