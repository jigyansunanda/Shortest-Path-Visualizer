{"ast":null,"code":"var _jsxFileName = \"/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/algorithms-info/info/DijkstraInfo.js\";\nimport Editor from \"@monaco-editor/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  readOnly: true,\n  minimap: {\n    enabled: false\n  },\n  automaticLayout: true,\n  scrollBeyondLastLine: false,\n  fontSize: \"13px\",\n  lineNumbers: \"off\",\n  glyphMargin: false,\n  folding: false,\n  lineDecorationsWidth: 5,\n  renderIndentGuides: false\n};\nconst Dijkstracode = `function Dijkstra(Graph[V, E], source, destination) {\n    1. create a Priority Queue (Min Heap), say 'pq'\n    2. intialize distance[V] = {Infinity, Infinity, Infinity, Infinity, ........}\n    3. distance[source] = 0\n    4. insert all vertices with distance[vertex] to pq                      // O(|V|) time\n    5. while (pq is not empty) {                                            // loop runs |V| times\n            vertex u := extract vertex with minimum distance from pq        // O(log |V|) time\n            if (u == destination) {\n                return distance[destination]\n            }\n            for (all vertices v: adjacent of u) {\n                if (distance[v] > distance[u] + weight(u, v)) {\n                    distance[v] = distance[u] + weight(u, v)\n                    insert vertex v with distance[v] to pq                  // Total time: O((|E| + |V|) log |V|)\n                }\n            }\n        }\n}`;\nconst DijkstraInfo = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Dijkstra's \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Shortest Path First (SPF)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 28\n      }, this), \" algorithm is a \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"greedy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 22\n      }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"links\",\n        href: \"https://en.wikipedia.org/wiki/Shortest_path_problem#Single-source_shortest_paths\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Single Source Shortest Path (SSSP)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), \"\\xA0 algorithm, conceived by\\xA0\", /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"links\",\n        href: \"https://en.wikipedia.org/wiki/Edsger_W._Dijkstra\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Edsger. W Dijkstra\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), \" \", \"in 1956.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Idea behind the algorithm:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"We maintain a container of distance for all vertices initialized with values Infinite.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Distance of source vertex is 0.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"At each iteration, we pick a vertex and finalize it distance. Initially none of the vertices have their distance finalized.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"How do we pick the vertex ?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"We pick the vertex for which distance has not been finalized and has minimum distance. (greedy choice)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Then we go to all adjacent vertices of it, and check whether do we get a shorter path to those vertices, through current vertex, If yes, then we update it's distance.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Editor, {\n      width: \"100%\",\n      height: \"30vh\",\n      theme: \"vs-dark\",\n      defaultLanguage: \"javascript\",\n      defaultValue: Dijkstracode,\n      value: Dijkstracode,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [\"Time Complexity: \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"O((|V| + |E|) log |V|)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 42\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Where, \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"|V|\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 32\n          }, this), \"\\xA0 = number of vertices and\", \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"|E|\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this), \"\\xA0 = number of edges\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Advantages:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Works for both\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"weighted & unweighted\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 29\n            }, this), \" graph\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Works for both \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"cyclic & acyclic\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 44\n            }, this), \" \", \"graph\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Works for both\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"directed & undirected\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 29\n            }, this), \" graph\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Disadvantages:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Does \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"not\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 34\n            }, this), \" work for graphs with\", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"negative weighted edges\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_c = DijkstraInfo;\nexport default DijkstraInfo;\nvar _c;\n$RefreshReg$(_c, \"DijkstraInfo\");","map":{"version":3,"names":["Editor","options","readOnly","minimap","enabled","automaticLayout","scrollBeyondLastLine","fontSize","lineNumbers","glyphMargin","folding","lineDecorationsWidth","renderIndentGuides","Dijkstracode","DijkstraInfo"],"sources":["/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/algorithms-info/info/DijkstraInfo.js"],"sourcesContent":["import Editor from \"@monaco-editor/react\";\n\nconst options = {\n    readOnly: true,\n    minimap: { enabled: false },\n    automaticLayout: true,\n    scrollBeyondLastLine: false,\n    fontSize: \"13px\",\n    lineNumbers: \"off\",\n    glyphMargin: false,\n    folding: false,\n    lineDecorationsWidth: 5,\n    renderIndentGuides: false,\n};\n\nconst Dijkstracode = `function Dijkstra(Graph[V, E], source, destination) {\n    1. create a Priority Queue (Min Heap), say 'pq'\n    2. intialize distance[V] = {Infinity, Infinity, Infinity, Infinity, ........}\n    3. distance[source] = 0\n    4. insert all vertices with distance[vertex] to pq                      // O(|V|) time\n    5. while (pq is not empty) {                                            // loop runs |V| times\n            vertex u := extract vertex with minimum distance from pq        // O(log |V|) time\n            if (u == destination) {\n                return distance[destination]\n            }\n            for (all vertices v: adjacent of u) {\n                if (distance[v] > distance[u] + weight(u, v)) {\n                    distance[v] = distance[u] + weight(u, v)\n                    insert vertex v with distance[v] to pq                  // Total time: O((|E| + |V|) log |V|)\n                }\n            }\n        }\n}`;\n\nconst DijkstraInfo = () => {\n    return (\n        <div>\n            <p>\n                Dijkstra's <strong>Shortest Path First (SPF)</strong> algorithm\n                is a <strong>greedy</strong>&nbsp;\n                <a\n                    className=\"links\"\n                    href=\"https://en.wikipedia.org/wiki/Shortest_path_problem#Single-source_shortest_paths\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Single Source Shortest Path (SSSP)\n                </a>\n                &nbsp; algorithm, conceived by&nbsp;\n                <a\n                    className=\"links\"\n                    href=\"https://en.wikipedia.org/wiki/Edsger_W._Dijkstra\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Edsger. W Dijkstra\n                </a>{\" \"}\n                in 1956.\n            </p>\n            <ul>\n                <li>\n                    <strong>Idea behind the algorithm:</strong>\n                    <ul>\n                        <li>\n                            We maintain a container of distance for all vertices\n                            initialized with values Infinite.\n                        </li>\n                        <li>Distance of source vertex is 0.</li>\n                        <li>\n                            At each iteration, we pick a vertex and finalize it\n                            distance. Initially none of the vertices have their\n                            distance finalized.\n                        </li>\n                        <li>\n                            <strong>How do we pick the vertex ?</strong>\n                            <ul>\n                                <li>\n                                    We pick the vertex for which distance has\n                                    not been finalized and has minimum distance.\n                                    (greedy choice)\n                                </li>\n                            </ul>\n                        </li>\n                        <li>\n                            Then we go to all adjacent vertices of it, and check\n                            whether do we get a shorter path to those vertices,\n                            through current vertex, If yes, then we update it's\n                            distance.\n                        </li>\n                    </ul>\n                </li>\n            </ul>\n            <Editor\n                width=\"100%\"\n                height=\"30vh\"\n                theme=\"vs-dark\"\n                defaultLanguage=\"javascript\"\n                defaultValue={Dijkstracode}\n                value={Dijkstracode}\n                options={options}\n            />\n            <ul>\n                <li>\n                    <strong>\n                        Time Complexity: <code>O((|V| + |E|) log |V|)</code>\n                    </strong>\n                    <p>\n                        Where, <code>|V|</code>&nbsp; = number of vertices and{\" \"}\n                        <code>|E|</code>&nbsp; = number of edges\n                    </p>\n                </li>\n                <li>\n                    <strong>Advantages:</strong>\n                    <ul>\n                        <li>\n                            Works for both{\" \"}\n                            <strong>weighted & unweighted</strong> graph\n                        </li>\n                        <li>\n                            Works for both <strong>cyclic & acyclic</strong>{\" \"}\n                            graph\n                        </li>\n                        <li>\n                            Works for both{\" \"}\n                            <strong>directed & undirected</strong> graph\n                        </li>\n                    </ul>\n                </li>\n                <li>\n                    <strong>Disadvantages:</strong>\n                    <ul>\n                        <li>\n                            Does <strong>not</strong> work for graphs with\n                            <strong>negative weighted edges</strong>\n                        </li>\n                    </ul>\n                </li>\n            </ul>\n        </div>\n    );\n};\n\nexport default DijkstraInfo;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}