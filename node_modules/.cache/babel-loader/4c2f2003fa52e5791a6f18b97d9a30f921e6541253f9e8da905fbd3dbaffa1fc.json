{"ast":null,"code":"var _jsxFileName = \"/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/grid/Grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Grid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateRandomNumber = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nconst [totalRows, totalCols] = [20, 40];\nvar sourceRow = 10;\nvar sourceCol = 10;\nvar destinationRow = 10;\nvar destinationCol = 30;\nvar grid = [];\nvar weight = [];\nclass Vertex {\n  constructor(x, y) {\n    this.row = x;\n    this.col = y;\n    this.isWall = false;\n    this.isSource = x === sourceRow && y === sourceCol;\n    this.isDestination = x === destinationRow && y === destinationCol;\n    this.weight = weight[x][y];\n  }\n}\nconst initializeWeights = () => {\n  for (let row = 0; row < totalRows; ++row) {\n    let weightOfColumns = [];\n    for (let col = 0; col < totalCols; ++col) {\n      let weight = generateRandomNumber(10, 30);\n      weightOfColumns.push(weight);\n    }\n    weight.push(weightOfColumns);\n  }\n};\ninitializeWeights();\nconst createVertices = () => {\n  for (let row = 0; row < totalRows; ++row) {\n    let columns = [];\n    for (let col = 0; col < totalCols; ++col) {\n      columns.push(new Vertex(row, col));\n    }\n    grid.push(columns);\n  }\n};\ncreateVertices();\nconst getNodeClass = (isSource, isDestination, isWall) => {\n  let nodeType = \"node\";\n  if (isSource) {\n    nodeType += \" source-node\";\n  } else if (isDestination) {\n    nodeType += \" destination-node\";\n  } else if (isWall) {\n    nodeType += \" wall-node\";\n  }\n  return nodeType;\n};\nvar isMouseDown = false;\nvar isRunning = false;\nconst Grid = () => {\n  _s();\n  const [initialGrid, setGrid] = useState(grid);\n  // const handleMouseUp = () => {\n  //     isMouseDown = false;\n  // };\n  // const handleMouseDown = () => {\n  //     isMouseDown = true;\n  // };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"full-grid\",\n      children: [\" \", grid.map((row, rowIndex) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [\" \", row.map((column, columnIndex) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: getNodeClass(column.isSource, column.isDestination, column.isWall),\n              id: `${rowIndex}-${columnIndex}`,\n              row: column.row,\n              col: column.col,\n              nodeType: getNodeClass(column.isSource, column.isDestination, column.isWall),\n              nodeWeight: column.weight,\n              isSource: column.isSource,\n              isDestination: column.isDestination,\n              isWall: column.isWall,\n              onMouseUp: () => {\n                if (column.isSource === false && column.isDestination === false) {\n                  isMouseDown = false;\n                }\n              },\n              onMouseDown: () => {\n                if (column.isSource === false && column.isDestination === false) {\n                  isMouseDown = true;\n                }\n              },\n              onMouseEnter: () => {\n                if (isMouseDown) {\n                  if (column.isSource === false && column.isDestination === false) {\n                    if (column.isWall === false) {\n                      column.isWall = true;\n                      document.getElementById(`${rowIndex}-${columnIndex}`).className = \"node wall-node\";\n                      setGrid(grid);\n                    } else {\n                      column.isWall = false;\n                      document.getElementById(`${rowIndex}-${columnIndex}`).className = \"node\";\n                      setGrid(grid);\n                    }\n                  }\n                }\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"not-selectable\",\n                children: [\" \", column.weight, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 33\n              }, this), \" \"]\n            }, columnIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 38\n            }, this);\n          }), \" \"]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 26\n        }, this);\n      }), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shortest-path-result not-selectable\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Shortest path has not been found yet!!! \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 15\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 14\n  }, this);\n};\n_s(Grid, \"kEP03Q2GsTUUgocC5qxJd1IxJQw=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","generateRandomNumber","min","max","Math","ceil","floor","random","totalRows","totalCols","sourceRow","sourceCol","destinationRow","destinationCol","grid","weight","Vertex","constructor","x","y","row","col","isWall","isSource","isDestination","initializeWeights","weightOfColumns","push","createVertices","columns","getNodeClass","nodeType","isMouseDown","isRunning","Grid","initialGrid","setGrid","map","rowIndex","column","columnIndex","document","getElementById","className"],"sources":["/Users/jigyansu_nanda/Desktop/shortest-path-visualizer/src/components/grid/Grid.js"],"sourcesContent":["import React, {\n    useState\n} from \"react\";\nimport \"./Grid.css\";\n\nconst generateRandomNumber = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst [totalRows, totalCols] = [20, 40];\n\nvar sourceRow = 10;\nvar sourceCol = 10;\nvar destinationRow = 10;\nvar destinationCol = 30;\n\nvar grid = [];\nvar weight = [];\n\nclass Vertex {\n    constructor(x, y) {\n        this.row = x;\n        this.col = y;\n        this.isWall = false;\n        this.isSource = x === sourceRow && y === sourceCol;\n        this.isDestination = x === destinationRow && y === destinationCol;\n        this.weight = weight[x][y];\n    }\n}\n\nconst initializeWeights = () => {\n    for (let row = 0; row < totalRows; ++row) {\n        let weightOfColumns = [];\n        for (let col = 0; col < totalCols; ++col) {\n            let weight = generateRandomNumber(10, 30);\n            weightOfColumns.push(weight);\n        }\n        weight.push(weightOfColumns);\n    }\n};\n\ninitializeWeights();\n\nconst createVertices = () => {\n    for (let row = 0; row < totalRows; ++row) {\n        let columns = [];\n        for (let col = 0; col < totalCols; ++col) {\n            columns.push(new Vertex(row, col));\n        }\n        grid.push(columns);\n    }\n};\n\ncreateVertices();\n\nconst getNodeClass = (isSource, isDestination, isWall) => {\n    let nodeType = \"node\";\n    if (isSource) {\n        nodeType += \" source-node\";\n    } else if (isDestination) {\n        nodeType += \" destination-node\";\n    } else if (isWall) {\n        nodeType += \" wall-node\";\n    }\n    return nodeType;\n};\n\nvar isMouseDown = false;\nvar isRunning = false;\n\nconst Grid = () => {\n    const [initialGrid, setGrid] = useState(grid);\n    // const handleMouseUp = () => {\n    //     isMouseDown = false;\n    // };\n    // const handleMouseDown = () => {\n    //     isMouseDown = true;\n    // };\n    return ( <\n        div className = \"board\" >\n        <\n        div className = \"full-grid\" > {\n            grid.map((row, rowIndex) => {\n                return ( <\n                    div key = {\n                        rowIndex\n                    }\n                    className = \"row\" > {\n                        row.map((column, columnIndex) => {\n                            return ( <\n                                div className = {\n                                    getNodeClass(\n                                        column.isSource,\n                                        column.isDestination,\n                                        column.isWall\n                                    )\n                                }\n                                id = {\n                                    `${rowIndex}-${columnIndex}`\n                                }\n                                key = {\n                                    columnIndex\n                                }\n                                row = {\n                                    column.row\n                                }\n                                col = {\n                                    column.col\n                                }\n                                nodeType = {\n                                    getNodeClass(\n                                        column.isSource,\n                                        column.isDestination,\n                                        column.isWall\n                                    )\n                                }\n                                nodeWeight = {\n                                    column.weight\n                                }\n                                isSource = {\n                                    column.isSource\n                                }\n                                isDestination = {\n                                    column.isDestination\n                                }\n                                isWall = {\n                                    column.isWall\n                                }\n                                onMouseUp = {\n                                    () => {\n                                        if (\n                                            column.isSource === false &&\n                                            column.isDestination === false\n                                        ) {\n                                            isMouseDown = false;\n                                        }\n                                    }\n                                }\n                                onMouseDown = {\n                                    () => {\n                                        if (\n                                            column.isSource === false &&\n                                            column.isDestination === false\n                                        ) {\n                                            isMouseDown = true;\n                                        }\n                                    }\n                                }\n                                onMouseEnter = {\n                                    () => {\n                                        if (isMouseDown) {\n                                            if (\n                                                column.isSource === false &&\n                                                column.isDestination ===\n                                                false\n                                            ) {\n                                                if (\n                                                    column.isWall === false\n                                                ) {\n                                                    column.isWall = true;\n                                                    document.getElementById(\n                                                            `${rowIndex}-${columnIndex}`\n                                                        ).className =\n                                                        \"node wall-node\";\n                                                    setGrid(grid);\n                                                } else {\n                                                    column.isWall = false;\n                                                    document.getElementById(\n                                                        `${rowIndex}-${columnIndex}`\n                                                    ).className = \"node\";\n                                                    setGrid(grid);\n                                                }\n                                            }\n                                        }\n                                    }\n                                } >\n                                <\n                                p className = \"not-selectable\" > {\n                                    column.weight\n                                } <\n                                /p> <\n                                /div>\n                            );\n                        })\n                    } <\n                    /div>\n                );\n            })\n        } <\n        /div> <\n        div className = \"shortest-path-result not-selectable\" >\n        <\n        p > Shortest path has not been found yet!!! < /p> <\n        /div> <\n        /div>\n    );\n};\n\nexport default Grid;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}